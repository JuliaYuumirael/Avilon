// üê± Cat Physics Controller - –£–ø—Ä–∞–≤–ª—è—é—â–∏–π —Ñ–∏–∑–∏–∫–æ–π –∫—Ä—ã—Å (Matter.js –≤–µ—Ä—Å–∏—è)
// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ Matter.js —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –º–∏—Ä –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫—Ä—ã—Å

class PhysicsController {
    constructor() {
        this.engine = null;
        this.world = null;
        this.ratBodies = [];
        this.walls = [];
        this.isInitialized = false;
        this.config = null;
        this.mousePosition = new THREE.Vector3(0, 0, 0);
        this.mouseInfluence = 2.0;

        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        this.physicsEnabled = true;
        this.timeStep = 1/60;
        this.lastTime = 0;

        console.log('üê± Physics Controller (Matter.js) –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –º–∏—Ä–∞
    async initialize() {
        if (this.isInitialized) return;

        try {
            // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Three.js –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
            while (!window.ThreeController?.isInitialized) {
                await new Promise(resolve => setTimeout(resolve, 100));
            }

            this.config = window.ThreeController.config;

            this.createPhysicsWorld();
            this.createWalls();
            this.createRatBodies();
            this.startPhysicsLoop();

            this.isInitialized = true;
            console.log('‚ö° –§–∏–∑–∏—á–µ—Å–∫–∏–π –º–∏—Ä (Matter.js) —Å–æ–∑–¥–∞–Ω!');

        } catch (error) {
            console.error('üí• –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∏–∑–∏–∫–∏:', error);
            throw error;
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –º–∏—Ä–∞
    createPhysicsWorld() {
        // –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ Matter.js
        this.engine = Matter.Engine.create();
        this.world = this.engine.world;

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        this.engine.world.gravity.y = 0.98; // –ù–µ–º–Ω–æ–≥–æ –º–µ–Ω—å—à–µ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏
        this.engine.enableSleeping = true; // –ü–æ–∑–≤–æ–ª—è–µ–º —Ç–µ–ª–∞–º "–∑–∞—Å—ã–ø–∞—Ç—å"

        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è Mac - —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π
        this.engine.positionIterations = 3; // –ë—ã–ª–æ –±—ã 6 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.engine.velocityIterations = 2; // –ë—ã–ª–æ –±—ã 4 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        console.log('üåç –§–∏–∑–∏—á–µ—Å–∫–∏–π –º–∏—Ä (Matter.js) –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å—Ç–µ–Ω
    createWalls() {
        const floorSize = this.config.scene.floorSize;
        const wallHeight = this.config.scene.wallHeight;
        const wallThickness = 0.5;

        // –ü–æ–ª
        const floor = Matter.Bodies.rectangle(
            0, wallHeight/2,
            floorSize, wallThickness,
            { isStatic: true, label: 'floor' }
        );

        // –°—Ç–µ–Ω—ã
        const walls = [
            // –ü—Ä–∞–≤–∞—è —Å—Ç–µ–Ω–∞
            Matter.Bodies.rectangle(
                floorSize/2, 0,
                wallThickness, wallHeight,
                { isStatic: true, label: 'wall-right' }
            ),
            // –õ–µ–≤–∞—è —Å—Ç–µ–Ω–∞
            Matter.Bodies.rectangle(
                -floorSize/2, 0,
                wallThickness, wallHeight,
                { isStatic: true, label: 'wall-left' }
            ),
            // –ó–∞–¥–Ω—è—è —Å—Ç–µ–Ω–∞
            Matter.Bodies.rectangle(
                0, -floorSize/2,
                floorSize, wallThickness,
                { isStatic: true, label: 'wall-back' }
            ),
            // –ü–µ—Ä–µ–¥–Ω—è—è —Å—Ç–µ–Ω–∞
            Matter.Bodies.rectangle(
                0, floorSize/2,
                floorSize, wallThickness,
                { isStatic: true, label: 'wall-front' }
            )
        ];

        this.walls = [floor, ...walls];
        Matter.World.add(this.world, this.walls);

        console.log('üß± –ù–µ–≤–∏–¥–∏–º—ã–µ —Å—Ç–µ–Ω—ã —Å–æ–∑–¥–∞–Ω—ã (Matter.js)');
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —Ç–µ–ª –¥–ª—è –∫—Ä—ã—Å
    createRatBodies() {
        const rats = window.ThreeController.getRats();
        const ratSize = this.config.rats.size;

        this.ratBodies = [];

        rats.forEach((rat, index) => {
            // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Ç–µ–ª–æ –≤ Matter.js
            const body = Matter.Bodies.rectangle(
                rat.mesh.position.x,
                rat.mesh.position.z, // Y –≤ Three.js = Z –≤ Matter (2D)
                ratSize.width,
                ratSize.depth,
                {
                    density: 0.001, // –õ–µ–≥–∫–∏–µ –∫—Ä—ã—Å—ã
                    frictionAir: 0.1, // –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –≤–æ–∑–¥—É—Ö–∞
                    friction: 0.8,
                    restitution: 0.3, // –£–ø—Ä—É–≥–æ—Å—Ç—å
                    label: `rat-${index}`
                }
            );

            Matter.World.add(this.world, body);
            this.ratBodies.push(body);

            // –°–≤—è–∑—ã–≤–∞–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Ç–µ–ª–æ —Å –∫—Ä—ã—Å–æ–π
            rat.physicsBody = body;
        });

        console.log(`üê≠ –°–æ–∑–¥–∞–Ω–æ ${this.ratBodies.length} —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —Ç–µ–ª –¥–ª—è –∫—Ä—ã—Å (Matter.js)`);
    }

    // –ó–∞–ø—É—Å–∫ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Ü–∏–∫–ª–∞
    startPhysicsLoop() {
        const physicsStep = () => {
            if (!this.physicsEnabled || window.ThreeController?.isPaused) {
                requestAnimationFrame(physicsStep);
                return;
            }

            const currentTime = performance.now();
            const deltaTime = currentTime - this.lastTime;
            this.lastTime = currentTime;

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫—Ä—ã—Å –ø–µ—Ä–µ–¥ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º —à–∞–≥–æ–º
            this.updateRatBehavior();

            // –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —à–∞–≥ Matter.js
            Matter.Engine.update(this.engine, Math.min(deltaTime, 16.67)); // –ú–∞–∫—Å–∏–º—É–º 60fps

            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Ç–µ–ª–∞ —Å Three.js –º–µ—à–∞–º–∏
            this.syncPhysicsToMeshes();

            requestAnimationFrame(physicsStep);
        };

        requestAnimationFrame(physicsStep);
        console.log('‚ö° –§–∏–∑–∏—á–µ—Å–∫–∏–π —Ü–∏–∫–ª (Matter.js) –∑–∞–ø—É—â–µ–Ω');
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∫—Ä—ã—Å
    updateRatBehavior() {
        const rats = window.ThreeController.getRats();
        const fearRadius = this.config.rats.behavior.fearRadius;
        const wanderStrength = this.config.rats.behavior.wanderStrength;

        rats.forEach((rat, index) => {
            if (!rat.physicsBody || !rat.isAlive) return;

            const body = rat.physicsBody;
            const position = body.position;

            // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∫—É—Ä—Å–æ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º X –∏ Y Matter.js)
            const distanceToMouse = Math.sqrt(
                Math.pow(this.mousePosition.x - position.x, 2) +
                Math.pow(this.mousePosition.z - position.y, 2) // Z –≤ Three = Y –≤ Matter
            );

            let forceX = 0;
            let forceY = 0;

            // –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫—É—Ä—Å–æ—Ä (—Å—Ç—Ä–∞—Ö)
            if (distanceToMouse < fearRadius) {
                const fearIntensity = 1 - (distanceToMouse / fearRadius);
                rat.fear = Math.min(rat.fear + fearIntensity * 0.1, 1);

                // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–±–µ–≥–∞–Ω–∏—è –æ—Ç –∫—É—Ä—Å–æ—Ä–∞
                const escapeDirection = {
                    x: position.x - this.mousePosition.x,
                    y: position.y - this.mousePosition.z
                };

                // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                const distance = Math.sqrt(escapeDirection.x ** 2 + escapeDirection.y ** 2);
                if (distance > 0) {
                    escapeDirection.x /= distance;
                    escapeDirection.y /= distance;
                }

                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∏–ª—É —Å—Ç—Ä–∞—Ö–∞
                const fearForce = rat.speed * rat.fear * this.config.rats.speed.panicMultiplier * 0.001;
                forceX += escapeDirection.x * fearForce;
                forceY += escapeDirection.y * fearForce;

            } else {
                // –£–º–µ–Ω—å—à–∞–µ–º —Å—Ç—Ä–∞—Ö –∫–æ–≥–¥–∞ –∫—É—Ä—Å–æ—Ä –¥–∞–ª–µ–∫–æ
                rat.fear = Math.max(rat.fear - 0.02, 0);
            }

            // –°–ª—É—á–∞–π–Ω–æ–µ –±–ª—É–∂–¥–∞–Ω–∏–µ (–∫–æ–≥–¥–∞ –Ω–µ –±–æ–∏—Ç—Å—è)
            if (rat.fear < 0.1) {
                const wanderX = (Math.random() - 0.5) * wanderStrength * 0.001;
                const wanderY = (Math.random() - 0.5) * wanderStrength * 0.001;

                forceX += wanderX * rat.speed;
                forceY += wanderY * rat.speed;
            }

            // –í–æ–∑–≤—Ä–∞—Ç –∫ —Ü–µ–Ω—Ç—Ä—É –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ
            if (this.config.rats.behavior.returnToCenter) {
                const distanceFromCenter = Math.sqrt(position.x ** 2 + position.y ** 2);
                const maxDistance = this.config.scene.floorSize / 2 - 1;

                if (distanceFromCenter > maxDistance) {
                    const returnForce = 0.0005;
                    forceX -= position.x * returnForce;
                    forceY -= position.y * returnForce;
                }
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∏–ª—ã –∫ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º—É —Ç–µ–ª—É
            if (Math.abs(forceX) > 0.00001 || Math.abs(forceY) > 0.00001) {
                Matter.Body.applyForce(body, position, { x: forceX, y: forceY });
            }

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
            const maxSpeed = rat.fear > 0.5 ?
                this.config.rats.speed.max * this.config.rats.speed.panicMultiplier :
                this.config.rats.speed.max;

            const velocity = body.velocity;
            const currentSpeed = Math.sqrt(velocity.x ** 2 + velocity.y ** 2);

            if (currentSpeed > maxSpeed) {
                const scale = maxSpeed / currentSpeed;
                Matter.Body.setVelocity(body, {
                    x: velocity.x * scale,
                    y: velocity.y * scale
                });
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞—Ö–∞
            this.updateRatAppearance(rat);
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –∫—Ä—ã—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    updateRatAppearance(rat) {
        if (!rat.mesh || !rat.mesh.material) return;

        const fearLevel = rat.fear;
        const originalColor = new THREE.Color(rat.originalColor);

        if (fearLevel > 0.1) {
            // –î–µ–ª–∞–µ–º –∫—Ä—ã—Å—É –∫—Ä–∞—Å–Ω–µ–µ –ø—Ä–∏ —Å—Ç—Ä–∞—Ö–µ
            const redTint = new THREE.Color(1, 0.5, 0.5);
            const mixedColor = originalColor.clone().lerp(redTint, fearLevel * 0.5);
            rat.mesh.material.color = mixedColor;

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø—Ä–∏ –ø–∞–Ω–∏–∫–µ
            const scale = 1 + fearLevel * 0.2;
            rat.mesh.scale.set(scale, scale, scale);
        } else {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –≤–∏–¥—É
            rat.mesh.material.color = originalColor;
            rat.mesh.scale.set(1, 1, 1);
        }
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —Ç–µ–ª —Å –º–µ—à–∞–º–∏ Three.js
    syncPhysicsToMeshes() {
        const rats = window.ThreeController.getRats();

        rats.forEach((rat) => {
            if (!rat.physicsBody || !rat.mesh) return;

            // –ö–æ–ø–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é (Matter.js 2D ‚Üí Three.js 3D)
            rat.mesh.position.x = rat.physicsBody.position.x;
            rat.mesh.position.z = rat.physicsBody.position.y; // Y –≤ Matter = Z –≤ Three
            // Y –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º (–≤—ã—Å–æ—Ç–∞ –∫—Ä—ã—Å—ã –Ω–∞–¥ –ø–æ–ª–æ–º)

            // –ü–æ–≤–æ—Ä–æ—Ç –ø–æ —É–≥–ª—É —Ç–µ–ª–∞
            rat.mesh.rotation.y = rat.physicsBody.angle;
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏ –¥–ª—è —Ñ–∏–∑–∏–∫–∏
    updateMousePosition(x, y, z) {
        this.mousePosition.set(x, y, z);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫—Ä—ã—Å—ã –≤ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –º–∏—Ä
    addRatBody(rat) {
        const ratSize = this.config.rats.size;

        const body = Matter.Bodies.rectangle(
            rat.mesh.position.x,
            rat.mesh.position.z,
            ratSize.width,
            ratSize.depth,
            {
                density: 0.001,
                frictionAir: 0.1,
                friction: 0.8,
                restitution: 0.3,
                label: `rat-${this.ratBodies.length}`
            }
        );

        Matter.World.add(this.world, body);
        this.ratBodies.push(body);
        rat.physicsBody = body;

        console.log('üê≠ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Ç–µ–ª–æ –¥–ª—è –∫—Ä—ã—Å—ã (Matter.js)');
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∫—Ä—ã—Å—ã –∏–∑ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –º–∏—Ä–∞
    removeRatBody(rat) {
        if (!rat.physicsBody) return;

        Matter.World.remove(this.world, rat.physicsBody);

        const index = this.ratBodies.indexOf(rat.physicsBody);
        if (index > -1) {
            this.ratBodies.splice(index, 1);
        }

        rat.physicsBody = null;

        console.log('üóëÔ∏è –§–∏–∑–∏—á–µ—Å–∫–æ–µ —Ç–µ–ª–æ –∫—Ä—ã—Å—ã —É–¥–∞–ª–µ–Ω–æ (Matter.js)');
    }

    // –°–±—Ä–æ—Å –≤—Å–µ—Ö –∫—Ä—ã—Å –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –ø–æ–∑–∏—Ü–∏—è–º
    resetRats() {
        const rats = window.ThreeController.getRats();
        const floorSize = this.config.scene.floorSize;
        const maxPos = floorSize / 2 - 1;

        rats.forEach((rat) => {
            if (!rat.physicsBody) return;

            // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
            const x = (Math.random() - 0.5) * maxPos;
            const y = (Math.random() - 0.5) * maxPos;

            Matter.Body.setPosition(rat.physicsBody, { x, y });
            Matter.Body.setVelocity(rat.physicsBody, { x: 0, y: 0 });
            Matter.Body.setAngularVelocity(rat.physicsBody, 0);

            rat.fear = 0;
        });

        console.log('üîÑ –ö—Ä—ã—Å—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –ø–æ–∑–∏—Ü–∏—è–º (Matter.js)');
    }

    // –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–∑–∏–∫–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    togglePhysics(enabled) {
        this.physicsEnabled = enabled;
        console.log(`‚ö° –§–∏–∑–∏–∫–∞ ${enabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'} (Matter.js)`);
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    setPerformanceMode(mode) {
        switch(mode) {
            case 'high':
                this.engine.positionIterations = 6;
                this.engine.velocityIterations = 4;
                break;
            case 'medium':
                this.engine.positionIterations = 4;
                this.engine.velocityIterations = 3;
                break;
            case 'low':
                this.engine.positionIterations = 3;
                this.engine.velocityIterations = 2;
                break;
            case 'potato': // –î–ª—è Mac –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                this.engine.positionIterations = 2;
                this.engine.velocityIterations = 1;
                break;
        }

        console.log(`üéõÔ∏è –†–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (Matter.js): ${mode}`);
    }

    // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–∑–∏–∫–∏
    emergencyStop() {
        this.physicsEnabled = false;

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ—Ö –∫—Ä—ã—Å
        this.ratBodies.forEach(body => {
            Matter.Body.setVelocity(body, { x: 0, y: 0 });
            Matter.Body.setAngularVelocity(body, 0);
        });

        console.log('üö® –§–∏–∑–∏–∫–∞ (Matter.js) —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∏–∑–∏–∫–∏
    getPhysicsStats() {
        return {
            bodiesCount: this.world.bodies.length,
            pairsCount: this.engine.pairs?.list?.length || 0,
            isEnabled: this.physicsEnabled,
            engineType: 'Matter.js',
            positionIterations: this.engine.positionIterations,
            velocityIterations: this.engine.velocityIterations
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.PhysicsController = new PhysicsController();