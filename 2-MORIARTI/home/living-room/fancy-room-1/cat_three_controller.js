// üê± Cat Three Controller - –£–ø—Ä–∞–≤–ª—è—é—â–∏–π 3D —Å—Ü–µ–Ω–æ–π
// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Three.js —Å—Ü–µ–Ω–æ–π

class ThreeController {
    constructor() {
        this.scene = null;
        this.camera = null;
        this.renderer = null;
        this.rats = [];
        this.config = null;
        this.isInitialized = false;
        this.isPaused = false;
        this.animationId = null;

        // Performance monitoring
        this.lastTime = 0;
        this.frameCount = 0;
        this.fps = 60;
        this.fpsHistory = [];

        console.log('üê± Three Controller –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 3D —Å—Ü–µ–Ω—ã
    async initialize() {
        if (this.isInitialized) return;

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            await this.loadConfig();

            // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            this.createScene();
            this.createCamera();
            this.createRenderer();
            this.createLights();
            this.createEnvironment();

            // –°–æ–∑–¥–∞–µ–º –∫—Ä—ã—Å
            await this.createRats();

            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–Ω–¥–µ—Ä
            this.startRenderLoop();

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã
            this.setupControls();

            this.isInitialized = true;
            this.hideLoadingOverlay();

            console.log('üé¨ Three.js —Å—Ü–µ–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');

        } catch (error) {
            console.error('üí• –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Three.js:', error);
            this.showError(error.message);
            throw error;
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    async loadConfig() {
        try {
            const response = await fetch('meow_room_1_config.json');
            this.config = await response.json();
            console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π');
            this.config = this.getDefaultConfig();
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
    createScene() {
        this.scene = new THREE.Scene();
        const bgColor = this.config.scene.backgroundColor || '#1a1a2e';
        this.scene.background = new THREE.Color(bgColor);
        this.scene.fog = new THREE.Fog(bgColor, 5, 15);

        console.log('üåç –°—Ü–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞');
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã
    createCamera() {
        const canvas = document.getElementById('three-canvas');
        const aspect = canvas.clientWidth / canvas.clientHeight;

        this.camera = new THREE.PerspectiveCamera(75, aspect, 0.1, 1000);

        const camPos = this.config.scene.cameraPosition;
        this.camera.position.set(camPos.x, camPos.y, camPos.z);
        this.camera.lookAt(0, 0, 0);

        console.log('üì∑ –ö–∞–º–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
    createRenderer() {
        const canvas = document.getElementById('three-canvas');

        this.renderer = new THREE.WebGLRenderer({
            canvas: canvas,
            antialias: !this.isMobileDevice(), // –û—Ç–∫–ª—é—á–∞–µ–º –∞–Ω—Ç–∏–∞–ª–∏–∞—Å–∏–Ω–≥ –Ω–∞ –º–æ–±–∏–ª–∫–∞—Ö
            powerPreference: "default" // –≠–∫–æ–Ω–æ–º–∏–º —ç–Ω–µ—Ä–≥–∏—é
        });

        this.renderer.setSize(canvas.clientWidth, canvas.clientHeight);
        this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2)); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º pixel ratio

        // –û—Ç–∫–ª—é—á–∞–µ–º —Ç–µ–Ω–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        this.renderer.shadowMap.enabled = this.config.performance.enableShadows;
        if (this.renderer.shadowMap.enabled) {
            this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
        }

        console.log('üñ•Ô∏è –†–µ–Ω–¥–µ—Ä–µ—Ä —Å–æ–∑–¥–∞–Ω');
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏—è
    createLights() {
        // Ambient light
        const ambientLight = new THREE.AmbientLight(
            0xffffff,
            this.config.scene.ambientLightIntensity
        );
        this.scene.add(ambientLight);

        // Directional light
        const directionalLight = new THREE.DirectionalLight(
            0xffffff,
            this.config.scene.directionalLightIntensity
        );
        directionalLight.position.set(5, 10, 5);
        directionalLight.castShadow = this.config.performance.enableShadows;

        if (directionalLight.castShadow) {
            directionalLight.shadow.mapSize.width = 1024;
            directionalLight.shadow.mapSize.height = 1024;
        }

        this.scene.add(directionalLight);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        this.ambientLight = ambientLight;
        this.directionalLight = directionalLight;

        console.log('üí° –û—Å–≤–µ—â–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ø–æ–ª, —Å—Ç–µ–Ω—ã)
    createEnvironment() {
        const floorSize = this.config.scene.floorSize;
        const wallHeight = this.config.scene.wallHeight;

        // –ü–æ–ª
        const floorGeometry = new THREE.PlaneGeometry(floorSize, floorSize);
        const floorMaterial = new THREE.MeshLambertMaterial({
            color: 0x333333,
            transparent: true,
            opacity: 0.8
        });
        const floor = new THREE.Mesh(floorGeometry, floorMaterial);
        floor.rotation.x = -Math.PI / 2;
        floor.receiveShadow = this.config.performance.enableShadows;
        this.scene.add(floor);

        // –ù–µ–≤–∏–¥–∏–º—ã–µ —Å—Ç–µ–Ω—ã –¥–ª—è —Ñ–∏–∑–∏–∫–∏ (—Å–æ–∑–¥–∞–¥–∏–º –ø–æ–∑–∂–µ –≤ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ)
        this.floorSize = floorSize;
        this.wallHeight = wallHeight;

        console.log('üèóÔ∏è –û–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ');
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—ã—Å
    async createRats() {
        const ratCount = this.config.rats.defaultCount;
        const ratSize = this.config.rats.size;
        const colors = this.config.rats.colors;

        this.rats = [];

        for (let i = 0; i < ratCount; i++) {
            const rat = this.createSingleRat(i, ratSize, colors);
            this.rats.push(rat);
            this.scene.add(rat.mesh);
        }

        console.log(`üê≠ –°–æ–∑–¥–∞–Ω–æ ${ratCount} –∫—Ä—ã—Å`);
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∫—Ä—ã—Å—ã
    createSingleRat(id, size, colors) {
        // –ü—Ä–æ—Å—Ç–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è - –∫—É–± —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏
        const geometry = new THREE.BoxGeometry(size.width, size.height, size.depth);

        // –ú–∞—Ç–µ—Ä–∏–∞–ª —Å —Å–ª—É—á–∞–π–Ω—ã–º —Ü–≤–µ—Ç–æ–º
        const color = colors[Math.floor(Math.random() * colors.length)];
        const material = new THREE.MeshLambertMaterial({
            color: color,
            transparent: true,
            opacity: 0.9
        });

        const mesh = new THREE.Mesh(geometry, material);

        // –°–ª—É—á–∞–π–Ω–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        const maxPos = this.floorSize / 2 - 1;
        mesh.position.set(
            (Math.random() - 0.5) * maxPos,
            size.height / 2,
            (Math.random() - 0.5) * maxPos
        );

        mesh.castShadow = this.config.performance.enableShadows;

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫—Ä—ã—Å—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
        const rat = {
            id: id,
            mesh: mesh,
            velocity: new THREE.Vector3(),
            targetPosition: new THREE.Vector3(),
            fear: 0, // –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–∞—Ö–∞
            curiosity: Math.random() * this.config.rats.behavior.curiosity,
            speed: this.config.rats.speed.min + Math.random() *
                (this.config.rats.speed.max - this.config.rats.speed.min),
            originalColor: color,
            isAlive: true
        };

        return rat;
    }

    // –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    startRenderLoop() {
        const animate = (currentTime) => {
            if (this.isPaused) {
                this.animationId = requestAnimationFrame(animate);
                return;
            }

            // –ü–æ–¥—Å—á–µ—Ç FPS
            this.updateFPS(currentTime);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if (this.config.performance.autoQualityAdjust) {
                this.checkPerformance();
            }

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä—ã—Å (–ª–æ–≥–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –±—É–¥–µ—Ç –≤ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ)
            this.updateRats();

            // –†–µ–Ω–¥–µ—Ä
            this.renderer.render(this.scene, this.camera);

            this.animationId = requestAnimationFrame(animate);
        };

        this.animationId = requestAnimationFrame(animate);
        console.log('üé¨ –¶–∏–∫–ª —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω');
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä—ã—Å
    updateRats() {
        this.rats.forEach(rat => {
            if (!rat.isAlive) return;

            // –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ–∫–∞—á–∏–≤–∞–Ω–∏—è
            rat.mesh.rotation.y += 0.01;

            // –õ–µ–≥–∫–æ–µ –ø–æ–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–≤–µ—Ä—Ö-–≤–Ω–∏–∑
            const time = Date.now() * 0.001;
            rat.mesh.position.y = rat.mesh.geometry.parameters.height / 2 +
                Math.sin(time * 2 + rat.id) * 0.05;
        });
    }

    // –ü–æ–¥—Å—á–µ—Ç FPS
    updateFPS(currentTime) {
        this.frameCount++;

        if (currentTime - this.lastTime >= 1000) {
            this.fps = Math.round((this.frameCount * 1000) / (currentTime - this.lastTime));
            this.fpsHistory.push(this.fps);

            // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π
            if (this.fpsHistory.length > 10) {
                this.fpsHistory.shift();
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            const fpsElement = document.getElementById('fps-counter');
            if (fpsElement) {
                fpsElement.textContent = this.fps;

                // –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç FPS
                if (this.fps >= 50) {
                    fpsElement.style.color = '#51cf66';
                } else if (this.fps >= 30) {
                    fpsElement.style.color = '#ffd43b';
                } else {
                    fpsElement.style.color = '#ff6b6b';
                }
            }

            this.frameCount = 0;
            this.lastTime = currentTime;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    checkPerformance() {
        if (this.fpsHistory.length < 5) return;

        const avgFPS = this.fpsHistory.reduce((a, b) => a + b, 0) / this.fpsHistory.length;
        const warningElement = document.getElementById('performance-warning');

        if (avgFPS < 30) {
            if (warningElement) {
                warningElement.style.display = 'block';
            }

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
            this.optimizePerformance();
        } else {
            if (warningElement) {
                warningElement.style.display = 'none';
            }
        }
    }

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    optimizePerformance() {
        console.log('‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å...');

        // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—ã—Å
        if (this.rats.length > 2) {
            const ratToRemove = this.rats.pop();
            this.scene.remove(ratToRemove.mesh);
            this.updateRatCount();
        }

        // –°–Ω–∏–∂–∞–µ–º pixel ratio
        this.renderer.setPixelRatio(1);
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤
    setupControls() {
        // –ö–æ–Ω—Ç—Ä–æ–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—Ä—ã—Å
        const ratCountSlider = document.getElementById('rat-count');
        const ratCountValue = document.getElementById('rat-count-value');

        if (ratCountSlider && ratCountValue) {
            ratCountSlider.value = this.rats.length;
            ratCountValue.textContent = this.rats.length;

            ratCountSlider.addEventListener('input', (e) => {
                const newCount = parseInt(e.target.value);
                this.setRatCount(newCount);
                ratCountValue.textContent = newCount;
            });
        }

        // –ö–æ–Ω—Ç—Ä–æ–ª —Å–∫–æ—Ä–æ—Å—Ç–∏
        const speedSlider = document.getElementById('rat-speed');
        const speedValue = document.getElementById('rat-speed-value');

        if (speedSlider && speedValue) {
            speedSlider.addEventListener('input', (e) => {
                const newSpeed = parseFloat(e.target.value);
                this.setRatSpeed(newSpeed);
                speedValue.textContent = newSpeed.toFixed(1);
            });
        }

        // –ö–æ–Ω—Ç—Ä–æ–ª —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
        const bgColorPicker = document.getElementById('background-color');
        if (bgColorPicker) {
            bgColorPicker.addEventListener('input', (e) => {
                this.setBackgroundColor(e.target.value);
            });
        }

        // –ö–æ–Ω—Ç—Ä–æ–ª –æ—Å–≤–µ—â–µ–Ω–∏—è
        const lightSlider = document.getElementById('light-intensity');
        const lightValue = document.getElementById('light-value');

        if (lightSlider && lightValue) {
            lightSlider.addEventListener('input', (e) => {
                const intensity = parseFloat(e.target.value);
                this.setLightIntensity(intensity);
                lightValue.textContent = intensity.toFixed(1);
            });
        }

        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const pauseButton = document.getElementById('pause-button');
        if (pauseButton) {
            pauseButton.addEventListener('click', () => this.togglePause());
        }

        const resetButton = document.getElementById('reset-button');
        if (resetButton) {
            resetButton.addEventListener('click', () => this.reset());
        }

        const emergencyButton = document.getElementById('emergency-stop');
        if (emergencyButton) {
            emergencyButton.addEventListener('click', () => this.emergencyStop());
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', () => this.onWindowResize());

        console.log('üéÆ –ö–æ–Ω—Ç—Ä–æ–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    setRatCount(count) {
        const currentCount = this.rats.length;

        if (count > currentCount) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä—ã—Å
            for (let i = currentCount; i < count; i++) {
                const rat = this.createSingleRat(i, this.config.rats.size, this.config.rats.colors);
                this.rats.push(rat);
                this.scene.add(rat.mesh);
            }
        } else if (count < currentCount) {
            // –£–¥–∞–ª—è–µ–º –∫—Ä—ã—Å
            for (let i = currentCount; i > count; i--) {
                const rat = this.rats.pop();
                this.scene.remove(rat.mesh);
            }
        }

        this.updateRatCount();
    }

    setRatSpeed(speed) {
        this.rats.forEach(rat => {
            rat.speed = speed;
        });
    }

    setBackgroundColor(color) {
        this.scene.background = new THREE.Color(color);
        this.scene.fog.color = new THREE.Color(color);
    }

    setLightIntensity(intensity) {
        if (this.directionalLight) {
            this.directionalLight.intensity = intensity;
        }
    }

    togglePause() {
        this.isPaused = !this.isPaused;
        const button = document.getElementById('pause-button');
        if (button) {
            button.textContent = this.isPaused ? '‚ñ∂Ô∏è –ò–≥—Ä–∞—Ç—å' : '‚è∏Ô∏è –ü–∞—É–∑–∞';
        }
    }

    reset() {
        // –°–±—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–π –∫—Ä—ã—Å
        this.rats.forEach(rat => {
            const maxPos = this.floorSize / 2 - 1;
            rat.mesh.position.set(
                (Math.random() - 0.5) * maxPos,
                rat.mesh.geometry.parameters.height / 2,
                (Math.random() - 0.5) * maxPos
            );
            rat.velocity.set(0, 0, 0);
            rat.fear = 0;
        });
    }

    emergencyStop() {
        console.log('üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê!');
        this.isPaused = true;

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        alert('üö® –ê–Ω–∏–º–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!');
    }

    updateRatCount() {
        const element = document.getElementById('active-rats');
        if (element) {
            element.textContent = this.rats.length;
        }
    }

    onWindowResize() {
        const canvas = document.getElementById('three-canvas');
        const width = canvas.clientWidth;
        const height = canvas.clientHeight;

        this.camera.aspect = width / height;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(width, height);
    }

    // –£—Ç–∏–ª–∏—Ç—ã
    isMobileDevice() {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    }

    hideLoadingOverlay() {
        const overlay = document.getElementById('loading-overlay');
        if (overlay) {
            overlay.style.display = 'none';
        }
    }

    showError(message) {
        const overlay = document.getElementById('error-overlay');
        const messageElement = document.querySelector('.error-message');

        if (overlay && messageElement) {
            messageElement.textContent = message;
            overlay.style.display = 'flex';
        }
    }

    getDefaultConfig() {
        return {
            performance: {
                maxRats: 5,
                enableShadows: false,
                autoQualityAdjust: true
            },
            rats: {
                defaultCount: 3,
                size: { width: 0.3, height: 0.3, depth: 0.3 },
                colors: ['#8B4513', '#A0522D', '#CD853F'],
                speed: { min: 0.5, max: 2.0 },
                behavior: { curiosity: 0.3, fearRadius: 2.0 }
            },
            scene: {
                backgroundColor: '#1a1a2e',
                ambientLightIntensity: 0.4,
                directionalLightIntensity: 0.8,
                cameraPosition: { x: 0, y: 5, z: 10 },
                floorSize: 10,
                wallHeight: 3
            }
        };
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
    getRats() {
        return this.rats;
    }

    getScene() {
        return this.scene;
    }

    getCamera() {
        return this.camera;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.ThreeController = new ThreeController();