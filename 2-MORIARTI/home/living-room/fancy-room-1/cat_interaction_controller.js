// üê± Cat Interaction Controller - –£–ø—Ä–∞–≤–ª—è—é—â–∏–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –º—ã—à–∏, –∫–∞—Å–∞–Ω–∏–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

class InteractionController {
    constructor() {
        this.canvas = null;
        this.camera = null;
        this.raycaster = new THREE.Raycaster();
        this.mouse = new THREE.Vector2();
        this.isInitialized = false;
        this.config = null;

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        this.isMouseDown = false;
        this.isDragging = false;
        this.lastMousePosition = { x: 0, y: 0 };
        this.mouseWorldPosition = new THREE.Vector3();

        // Touch support
        this.isTouchDevice = this.detectTouchDevice();
        this.touches = new Map();

        // Throttling –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        this.lastInteractionTime = 0;
        this.interactionThrottle = 16; // ~60fps

        console.log('üê± Interaction Controller –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    async initialize() {
        if (this.isInitialized) return;

        try {
            // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
            while (!window.ThreeController?.isInitialized || !window.PhysicsController?.isInitialized) {
                await new Promise(resolve => setTimeout(resolve, 100));
            }

            this.config = window.ThreeController.config;
            this.canvas = document.getElementById('three-canvas');
            this.camera = window.ThreeController.getCamera();

            this.setupEventListeners();
            this.setupKeyboardControls();

            this.isInitialized = true;
            console.log('üñ±Ô∏è –°–∏—Å—Ç–µ–º–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');

        } catch (error) {
            console.error('üí• –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:', error);
            throw error;
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        if (!this.canvas) return;

        // Mouse events
        this.canvas.addEventListener('mousemove', (e) => this.onMouseMove(e));
        this.canvas.addEventListener('mousedown', (e) => this.onMouseDown(e));
        this.canvas.addEventListener('mouseup', (e) => this.onMouseUp(e));
        this.canvas.addEventListener('mouseleave', (e) => this.onMouseLeave(e));
        this.canvas.addEventListener('wheel', (e) => this.onMouseWheel(e));

        // Touch events –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        if (this.isTouchDevice) {
            this.canvas.addEventListener('touchstart', (e) => this.onTouchStart(e), { passive: false });
            this.canvas.addEventListener('touchmove', (e) => this.onTouchMove(e), { passive: false });
            this.canvas.addEventListener('touchend', (e) => this.onTouchEnd(e), { passive: false });
            this.canvas.addEventListener('touchcancel', (e) => this.onTouchCancel(e), { passive: false });
        }

        // Keyboard events
        document.addEventListener('keydown', (e) => this.onKeyDown(e));
        document.addEventListener('keyup', (e) => this.onKeyUp(e));

        // Window events
        window.addEventListener('blur', () => this.onWindowBlur());
        window.addEventListener('focus', () => this.onWindowFocus());

        console.log('üéÆ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
    onMouseMove(event) {
        if (!this.config.interaction.mouseInfluence) return;

        const currentTime = performance.now();
        if (currentTime - this.lastInteractionTime < this.interactionThrottle) {
            return; // Throttling –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        }
        this.lastInteractionTime = currentTime;

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –º—ã—à–∏ –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
        const rect = this.canvas.getBoundingClientRect();
        this.mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
        this.mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–∏—Ä–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        this.updateMouseWorldPosition();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
        window.PhysicsController.updateMousePosition(
            this.mouseWorldPosition.x,
            this.mouseWorldPosition.y,
            this.mouseWorldPosition.z
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –Ω–∞–¥ —á–µ–º –º—ã
        this.updateCursor();

        this.lastMousePosition = { x: event.clientX, y: event.clientY };
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∏—Ä–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏
    updateMouseWorldPosition() {
        // –°–æ–∑–¥–∞–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–ª–∞
        const plane = new THREE.Plane(new THREE.Vector3(0, 1, 0), 0);

        // –°–æ–∑–¥–∞–µ–º –ª—É—á –æ—Ç –∫–∞–º–µ—Ä—ã —á–µ—Ä–µ–∑ –ø–æ–∑–∏—Ü–∏—é –º—ã—à–∏
        this.raycaster.setFromCamera(this.mouse, this.camera);

        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –ø–ª–æ—Å–∫–æ—Å—Ç—å—é –ø–æ–ª–∞
        const intersection = new THREE.Vector3();
        this.raycaster.ray.intersectPlane(plane, intersection);

        if (intersection) {
            this.mouseWorldPosition.copy(intersection);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –º—ã—à–∏
    onMouseDown(event) {
        this.isMouseDown = true;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–ª–∏–∫–Ω—É–ª–∏ –ª–∏ –º—ã –ø–æ –∫—Ä—ã—Å–µ
        this.checkRatClick();

        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –∫–ª–∏–∫–µ
        this.createClickEffect();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –º—ã—à–∏
    onMouseUp(event) {
        this.isMouseDown = false;
        this.isDragging = false;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –º—ã—à–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã canvas
    onMouseLeave(event) {
        this.isMouseDown = false;
        this.isDragging = false;

        // –£–±–∏—Ä–∞–µ–º –≤–ª–∏—è–Ω–∏–µ –º—ã—à–∏ –Ω–∞ –∫—Ä—ã—Å
        window.PhysicsController.updateMousePosition(1000, 0, 1000); // –î–∞–ª–µ–∫–æ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–µ—Å–∏–∫–∞ –º—ã—à–∏ (–∑—É–º –∫–∞–º–µ—Ä—ã)
    onMouseWheel(event) {
        if (!this.config.interaction.cameraControls) return;

        event.preventDefault();

        const zoomSpeed = 0.1;
        const direction = event.deltaY > 0 ? 1 : -1;

        // –î–≤–∏–≥–∞–µ–º –∫–∞–º–µ—Ä—É –±–ª–∏–∂–µ/–¥–∞–ª—å—à–µ
        const camera = this.camera;
        const moveDistance = direction * zoomSpeed;

        camera.position.x += camera.position.x * moveDistance * 0.1;
        camera.position.y += camera.position.y * moveDistance * 0.1;
        camera.position.z += camera.position.z * moveDistance * 0.1;

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑—É–º
        const distance = camera.position.length();
        if (distance < 3) {
            camera.position.normalize().multiplyScalar(3);
        } else if (distance > 20) {
            camera.position.normalize().multiplyScalar(20);
        }

        camera.lookAt(0, 0, 0);
    }

    // Touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    onTouchStart(event) {
        event.preventDefault();

        for (let i = 0; i < event.changedTouches.length; i++) {
            const touch = event.changedTouches[i];
            this.touches.set(touch.identifier, {
                x: touch.clientX,
                y: touch.clientY,
                startTime: Date.now()
            });
        }

        // –ï—Å–ª–∏ –æ–¥–∏–Ω –ø–∞–ª–µ—Ü - —ç–º—É–ª–∏—Ä—É–µ–º –º—ã—à—å
        if (event.touches.length === 1) {
            const touch = event.touches[0];
            this.emulateMouseEvent('mousemove', touch);
            this.emulateMouseEvent('mousedown', touch);
        }
    }

    onTouchMove(event) {
        event.preventDefault();

        if (event.touches.length === 1) {
            const touch = event.touches[0];
            this.emulateMouseEvent('mousemove', touch);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫–∞—Å–∞–Ω–∏–π
        for (let i = 0; i < event.changedTouches.length; i++) {
            const touch = event.changedTouches[i];
            if (this.touches.has(touch.identifier)) {
                const stored = this.touches.get(touch.identifier);
                stored.x = touch.clientX;
                stored.y = touch.clientY;
            }
        }
    }

    onTouchEnd(event) {
        event.preventDefault();

        if (event.touches.length === 0) {
            this.emulateMouseEvent('mouseup', event.changedTouches[0]);
            this.emulateMouseEvent('mouseleave', event.changedTouches[0]);
        }

        // –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫–∞—Å–∞–Ω–∏—è
        for (let i = 0; i < event.changedTouches.length; i++) {
            const touch = event.changedTouches[i];
            this.touches.delete(touch.identifier);
        }
    }

    onTouchCancel(event) {
        this.onTouchEnd(event);
    }

    // –≠–º—É–ª—è—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ –¥–ª—è touch —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    emulateMouseEvent(type, touch) {
        const mouseEvent = new MouseEvent(type, {
            clientX: touch.clientX,
            clientY: touch.clientY,
            bubbles: true,
            cancelable: true
        });

        this.canvas.dispatchEvent(mouseEvent);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    onKeyDown(event) {
        if (!this.config.interaction.keyboardControls) return;

        switch(event.code) {
            case 'Space':
                event.preventDefault();
                window.ThreeController.togglePause();
                break;

            case 'KeyR':
                event.preventDefault();
                window.PhysicsController.resetRats();
                break;

            case 'Escape':
                event.preventDefault();
                this.showInstructions();
                break;

            case 'KeyH':
                event.preventDefault();
                this.toggleInstructions();
                break;

            case 'Digit1':
            case 'Digit2':
            case 'Digit3':
            case 'Digit4':
            case 'Digit5':
            case 'Digit6':
            case 'Digit7':
                event.preventDefault();
                const ratCount = parseInt(event.code.slice(-1));
                window.ThreeController.setRatCount(ratCount);
                break;

            case 'KeyP':
                event.preventDefault();
                this.togglePerformanceMode();
                break;

            case 'KeyQ':
                event.preventDefault();
                this.quickEscape();
                break;
        }
    }

    onKeyUp(event) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–ª–∞–≤–∏—à –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫—Ä—ã—Å–µ
    checkRatClick() {
        this.raycaster.setFromCamera(this.mouse, this.camera);

        const rats = window.ThreeController.getRats();
        const meshes = rats.map(rat => rat.mesh);

        const intersects = this.raycaster.intersectObjects(meshes);

        if (intersects.length > 0) {
            const clickedMesh = intersects[0].object;
            const clickedRat = rats.find(rat => rat.mesh === clickedMesh);

            if (clickedRat) {
                this.onRatClicked(clickedRat);
            }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫—Ä—ã—Å–µ
    onRatClicked(rat) {
        console.log(`üê≠ –ö–ª–∏–∫–Ω—É–ª–∏ –ø–æ –∫—Ä—ã—Å–µ ${rat.id}!`);

        // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∏—Å–ø—É–≥–∞
        rat.fear = 1.0;

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø—É–ª—å—Å "—Ç–æ–ª—á–∫–∞"
        if (rat.physicsBody) {
            const pushDirection = new THREE.Vector3()
                .subVectors(rat.mesh.position, this.mouseWorldPosition)
                .normalize()
                .multiplyScalar(5);

            rat.physicsBody.applyImpulse(
                new CANNON.Vec3(pushDirection.x, 1, pushDirection.z),
                rat.physicsBody.position
            );
        }

        // –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
        this.createRatClickEffect(rat);
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∫–ª–∏–∫–∞
    createClickEffect() {
        // –ü—Ä–æ—Å—Ç–æ–π —ç—Ñ—Ñ–µ–∫—Ç —Ä—è–±–∏ –≤ –º–µ—Å—Ç–µ –∫–ª–∏–∫–∞
        const ripple = document.createElement('div');
        ripple.style.cssText = `
            position: absolute;
            width: 20px;
            height: 20px;
            border: 2px solid rgba(79, 172, 254, 0.8);
            border-radius: 50%;
            pointer-events: none;
            left: ${this.lastMousePosition.x - 10}px;
            top: ${this.lastMousePosition.y - 10}px;
            animation: ripple 0.6s ease-out forwards;
            z-index: 1000;
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!document.getElementById('ripple-style')) {
            const style = document.createElement('style');
            style.id = 'ripple-style';
            style.textContent = `
                @keyframes ripple {
                    0% {
                        transform: scale(1);
                        opacity: 1;
                    }
                    100% {
                        transform: scale(4);
                        opacity: 0;
                    }
                }
            `;
            document.head.appendChild(style);
        }

        document.body.appendChild(ripple);

        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            if (ripple.parentNode) {
                ripple.parentNode.removeChild(ripple);
            }
        }, 600);
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∫–ª–∏–∫–∞ –ø–æ –∫—Ä—ã—Å–µ
    createRatClickEffect(rat) {
        // –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫—Ä—ã—Å—ã
        const originalColor = rat.mesh.material.color.clone();
        rat.mesh.material.color.setHex(0xffff00); // –ñ–µ–ª—Ç—ã–π

        setTimeout(() => {
            rat.mesh.material.color.copy(originalColor);
        }, 200);

        console.log(`‚ú® –≠—Ñ—Ñ–µ–∫—Ç –∫–ª–∏–∫–∞ –ø–æ –∫—Ä—ã—Å–µ ${rat.id}`);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞
    updateCursor() {
        if (!this.canvas) return;

        this.raycaster.setFromCamera(this.mouse, this.camera);
        const rats = window.ThreeController.getRats();
        const meshes = rats.map(rat => rat.mesh);

        const intersects = this.raycaster.intersectObjects(meshes);

        if (intersects.length > 0) {
            this.canvas.style.cursor = 'pointer';
        } else {
            this.canvas.style.cursor = 'crosshair';
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã—Ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    setupKeyboardControls() {
        if (!this.config.interaction.keyboardControls) return;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∫–ª–∞–≤–∏—à–∞–º
        console.log(`
üéÆ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
  –ü—Ä–æ–±–µ–ª - –ø–∞—É–∑–∞/–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
  R - —Å–±—Ä–æ—Å –∫—Ä—ã—Å
  1-7 - –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—ã—Å
  H - –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
  P - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  Q - –±—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥
  ESC - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        `);
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    togglePerformanceMode() {
        const modes = ['high', 'medium', 'low', 'potato'];
        const currentMode = this.performanceMode || 'high';
        const currentIndex = modes.indexOf(currentMode);
        const nextIndex = (currentIndex + 1) % modes.length;
        const nextMode = modes[nextIndex];

        this.performanceMode = nextMode;
        window.PhysicsController.setPerformanceMode(nextMode);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showNotification(`–†–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${nextMode}`);

        console.log(`üéõÔ∏è –†–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${nextMode}`);
    }

    // –ë—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥
    quickEscape() {
        if (confirm('üèÉ‚Äç‚ôÇÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —ç—Ç–∞–∂ –≥–æ—Å—Ç–∏–Ω—ã—Ö?')) {
            window.location.href = '../dog_living_room.html';
        }
    }

    // –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    toggleInstructions() {
        const instructions = document.getElementById('instructions');
        if (instructions) {
            instructions.style.display =
                instructions.style.display === 'none' ? 'block' : 'none';
        }
    }

    showInstructions() {
        const instructions = document.getElementById('instructions');
        if (instructions) {
            instructions.style.display = 'block';
        }
    }

    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    showNotification(message, duration = 2000) {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(79, 172, 254, 0.9);
            color: white;
            padding: 15px 20px;
            border-radius: 10px;
            font-size: 14px;
            z-index: 10000;
            animation: slideIn 0.3s ease-out;
        `;
        notification.textContent = message;

        // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é
        if (!document.getElementById('notification-style')) {
            const style = document.createElement('style');
            style.id = 'notification-style';
            style.textContent = `
                @keyframes slideIn {
                    from {
                        transform: translateX(100%);
                        opacity: 0;
                    }
                    to {
                        transform: translateX(0);
                        opacity: 1;
                    }
                }
            `;
            document.head.appendChild(style);
        }

        document.body.appendChild(notification);

        setTimeout(() => {
            if (notification.parentNode) {
                notification.style.animation = 'slideIn 0.3s ease-out reverse';
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.parentNode.removeChild(notification);
                    }
                }, 300);
            }
        }, duration);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ –æ–∫–Ω–∞
    onWindowBlur() {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–≤–∏–º –Ω–∞ –ø–∞—É–∑—É –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
        if (!window.ThreeController?.isPaused) {
            window.ThreeController.togglePause();
            this.showNotification('–ò–≥—Ä–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É');
        }
    }

    onWindowFocus() {
        // –ú–æ–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–Ω–∏–º–∞—Ç—å —Å –ø–∞—É–∑—ã –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Ñ–æ–∫—É—Å–∞
        // –ù–æ –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    }

    // –î–µ—Ç–µ–∫—Ü–∏—è touch —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    detectTouchDevice() {
        return (('ontouchstart' in window) ||
            (navigator.maxTouchPoints > 0) ||
            (navigator.msMaxTouchPoints > 0));
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    getInteractionStats() {
        return {
            isTouchDevice: this.isTouchDevice,
            activeTouches: this.touches.size,
            mousePosition: this.mouse,
            mouseWorldPosition: this.mouseWorldPosition,
            isMouseDown: this.isMouseDown,
            lastInteractionTime: this.lastInteractionTime
        };
    }

    // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
    emergencyStop() {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        if (this.canvas) {
            this.canvas.style.pointerEvents = 'none';
        }

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.isMouseDown = false;
        this.isDragging = false;
        this.touches.clear();

        this.showNotification('üö® –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ!', 3000);
        console.log('üö® –°–∏—Å—Ç–µ–º–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');
    }

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    restore() {
        if (this.canvas) {
            this.canvas.style.pointerEvents = 'auto';
        }

        this.showNotification('‚úÖ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
        console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    setSensitivity(level) {
        switch(level) {
            case 'low':
                this.interactionThrottle = 32; // ~30fps
                break;
            case 'medium':
                this.interactionThrottle = 16; // ~60fps
                break;
            case 'high':
                this.interactionThrottle = 8;  // ~120fps
                break;
        }

        console.log(`üéØ –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${level}`);
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.InteractionController = new InteractionController();