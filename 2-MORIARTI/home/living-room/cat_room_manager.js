// üê± Cat Room Manager - –£–ø—Ä–∞–≤–ª—è—é—â–∏–π —ç—Ç–∞–∂–æ–º –≥–æ—Å—Ç–∏–Ω—ã—Ö
// –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã, —Å–æ–∑–¥–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π

class RoomManager {
    constructor() {
        this.config = null;
        this.starsContainer = null;
        this.isInitialized = false;

        console.log('üê± Cat Room Manager –ø—Ä–æ—Å–Ω—É–ª—Å—è!');
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç—Ç–∞–∂–∞
    async initialize() {
        if (this.isInitialized) return;

        try {
            await this.loadRoomConfigs();
            this.createStars();
            this.setupRoomCards();
            this.setupNavigation();
            this.isInitialized = true;

            console.log('üè† –≠—Ç–∞–∂ –≥–æ—Å—Ç–∏–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω!');
        } catch (error) {
            console.error('üí• –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–∞–∂–∞:', error);
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–º–Ω–∞—Ç
    async loadRoomConfigs() {
        try {
            const response = await fetch('meow_room_configs.json');
            this.config = await response.json();
            console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–º–Ω–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞');

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            this.updateFloorInfo();
        } catch (error) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:', error);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            this.config = this.getFallbackConfig();
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–∞–∂–µ
    updateFloorInfo() {
        if (!this.config?.floorInfo) return;

        const titleElement = document.querySelector('.floor-title');
        const subtitleElement = document.querySelector('.floor-subtitle');
        const descriptionElement = document.querySelector('.floor-description');

        if (titleElement) titleElement.textContent = this.config.floorInfo.title;
        if (subtitleElement) subtitleElement.textContent = this.config.floorInfo.subtitle;
        if (descriptionElement) descriptionElement.textContent = this.config.floorInfo.description;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–≤–µ–∑–¥–Ω–æ–≥–æ —Ñ–æ–Ω–∞
    createStars() {
        this.starsContainer = document.getElementById('stars');
        if (!this.starsContainer) return;

        const starCount = this.config?.settings?.starCount || 15;

        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–≤–µ–∑–¥—ã
        this.starsContainer.innerHTML = '';

        for (let i = 0; i < starCount; i++) {
            const star = document.createElement('div');
            star.className = 'star';

            // –°–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            star.style.left = Math.random() * 100 + '%';
            star.style.top = Math.random() * 100 + '%';
            star.style.width = star.style.height = (Math.random() * 2 + 1) + 'px';
            star.style.animationDelay = Math.random() * 3 + 's';

            this.starsContainer.appendChild(star);
        }

        console.log(`‚ú® –°–æ–∑–¥–∞–Ω–æ ${starCount} –∑–≤–µ–∑–¥`);
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–æ–º–Ω–∞—Ç
    setupRoomCards() {
        const roomCards = document.querySelectorAll('.room-card');

        roomCards.forEach((card, index) => {
            const roomId = card.dataset.room;
            if (roomId && this.config?.rooms?.[roomId]) {
                this.populateRoomCard(card, this.config.rooms[roomId]);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
            card.addEventListener('click', () => this.enterRoom(roomId));

            // –î–æ–±–∞–≤–ª—è–µ–º hover —ç—Ñ—Ñ–µ–∫—Ç—ã
            this.setupCardHoverEffects(card);
        });
    }

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–º–Ω–∞—Ç—ã –¥–∞–Ω–Ω—ã–º–∏
    populateRoomCard(card, roomData) {
        const iconElement = card.querySelector('.room-icon');
        const nameElement = card.querySelector('.room-name');
        const techElement = card.querySelector('.room-tech');
        const descriptionElement = card.querySelector('.room-description');
        const statusElement = card.querySelector('.room-status');

        if (iconElement) iconElement.textContent = roomData.icon;
        if (nameElement) nameElement.textContent = roomData.name;
        if (techElement) techElement.textContent = roomData.techDisplay;
        if (descriptionElement) descriptionElement.textContent = roomData.description;

        if (statusElement) {
            statusElement.className = `room-status status-${roomData.status}`;
            statusElement.textContent = roomData.status === 'ready' ? '–ì–æ—Ç–æ–≤–æ!' : 'Coming Soon';
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ hover —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
    setupCardHoverEffects(card) {
        card.addEventListener('mouseenter', () => {
            console.log(`üñ±Ô∏è –ù–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ ${card.dataset.room}`);
        });

        card.addEventListener('mouseleave', () => {
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ —É—Ö–æ–¥–µ –∫—É—Ä—Å–æ—Ä–∞
        });
    }

    // –í—Ö–æ–¥ –≤ –∫–æ–º–Ω–∞—Ç—É
    enterRoom(roomId) {
        if (!roomId) return;

        console.log(`üö™ –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∫–æ–º–Ω–∞—Ç—É: ${roomId}`);

        const roomData = this.config?.rooms?.[roomId];
        if (!roomData) {
            console.error(`‚ùå –ö–æ–º–Ω–∞—Ç–∞ ${roomId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏`);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã
        if (roomData.status === 'ready') {
            this.navigateToRoom(roomId);
        } else {
            this.showComingSoonNotification(roomId, roomData);
        }
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–æ—Ç–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
    navigateToRoom(roomId) {
        const url = `${roomId}/dog_${roomId}.html`;
        console.log(`üö∂ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ–º–Ω–∞—Ç—É: ${url}`);
        window.location.href = url;
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
    showComingSoonNotification(roomId, roomData) {
        const notification = document.createElement('div');
        notification.className = 'coming-soon-notification';

        notification.innerHTML = `
            <div class="notification-content">
                <div class="notification-icon">${roomData.icon}</div>
                <h2>üöß –ö–æ–º–Ω–∞—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</h2>
                <p>–ö—Ä—ã—Å—ã –∏ –∫–æ—Ç—ã –µ—â–µ –æ–±—É—Å—Ç—Ä–∞–∏–≤–∞—é—Ç <strong>${roomData.name}</strong>!</p>
                <p class="tech-info">–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: ${roomData.techDisplay}</p>
                <p class="difficulty">–°–ª–æ–∂–Ω–æ—Å—Ç—å: ${this.getDifficultyLabel(roomData.difficulty)}</p>
                <button class="close-notification">–ü–æ–Ω—è—Ç–Ω–æ</button>
            </div>
        `;

        // –°—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10000;
            backdrop-filter: blur(5px);
        `;

        const content = notification.querySelector('.notification-content');
        content.style.cssText = `
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 40px;
            text-align: center;
            max-width: 500px;
            border: 2px solid #667eea;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
        `;

        const closeButton = notification.querySelector('.close-notification');
        closeButton.style.cssText = `
            margin-top: 20px;
            padding: 12px 24px;
            border: none;
            border-radius: 10px;
            background: #667eea;
            color: white;
            cursor: pointer;
            font-size: 16px;
            transition: background 0.3s;
        `;

        closeButton.addEventListener('click', () => {
            document.body.removeChild(notification);
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
        notification.addEventListener('click', (e) => {
            if (e.target === notification) {
                document.body.removeChild(notification);
            }
        });

        document.body.appendChild(notification);
        console.log(`üí¨ –ü–æ–∫–∞–∑–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è ${roomId}`);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    getDifficultyLabel(difficulty) {
        const labels = {
            'beginner': 'üü¢ –ù–∞—á–∏–Ω–∞—é—â–∏–π',
            'intermediate': 'üü° –°—Ä–µ–¥–Ω–∏–π',
            'advanced': 'üü† –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π',
            'expert': 'üî¥ –≠–∫—Å–ø–µ—Ä—Ç'
        };
        return labels[difficulty] || difficulty;
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    setupNavigation() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–º–æ–π"
        const homeButton = document.querySelector('.back-button');
        if (homeButton) {
            homeButton.addEventListener('click', (e) => {
                console.log('üè† –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –¥–æ–º–æ–π');
            });
        }

        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                // –ó–∞–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                const notifications = document.querySelectorAll('.coming-soon-notification');
                notifications.forEach(n => n.remove());
            }
        });
    }

    // Fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    getFallbackConfig() {
        return {
            floorInfo: {
                title: "üõãÔ∏è –≠—Ç–∞–∂ –ß—É–¥–µ—Å",
                subtitle: "–ö–æ–º–Ω–∞—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...",
                description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
            },
            rooms: {},
            settings: {
                starCount: 10,
                enableAnimations: true
            }
        };
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–Ω–∞—Ç–µ
    getRoomInfo(roomId) {
        return this.config?.rooms?.[roomId] || null;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–Ω–∞—Ç—ã
    updateRoomStatus(roomId, newStatus) {
        if (this.config?.rooms?.[roomId]) {
            this.config.rooms[roomId].status = newStatus;
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
            const card = document.querySelector(`[data-room="${roomId}"]`);
            if (card) {
                this.populateRoomCard(card, this.config.rooms[roomId]);
            }
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π
    toggleAnimations(enabled) {
        if (this.config?.settings) {
            this.config.settings.enableAnimations = enabled;
        }

        document.body.classList.toggle('animations-disabled', !enabled);
        console.log(`üé¨ –ê–Ω–∏–º–∞—Ü–∏–∏ ${enabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}`);
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
window.RoomManager = new RoomManager();

// –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    window.RoomManager.initialize();
});