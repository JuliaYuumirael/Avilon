/**
 * ü¶µ Legs - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */

import * as fs from 'fs';
import * as path from 'path';
import {
    TreeNode,
    Leg,
    FileSystemConfig,
    AsciiConfig,
    MarkdownConfig,
    TransformResult
} from './fly_interfaces';

/**
 * FileSystem Leg - —Å–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Ñ–∞–π–ª–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
 */
export class FileSystemLeg implements Leg<FileSystemConfig> {
    generate(nodes: TreeNode[], config: FileSystemConfig): TransformResult<string[]> {
        const createdPaths: string[] = [];
        try {
            if (!fs.existsSync(config.outputPath)) {
                fs.mkdirSync(config.outputPath, { recursive: true });
            }
            this.createNodesRecursively(nodes, config.outputPath, createdPaths, config.overwrite || false);
            if (config.createReadme) {
                this.createReadme(config.outputPath, nodes); // –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ nodes –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ä–µ–≤–∞ –≤ README
                createdPaths.push(path.join(config.outputPath, 'README.md'));
            }
            if (config.createGitignore) {
                this.createGitignore(config.outputPath);
                createdPaths.push(path.join(config.outputPath, '.gitignore'));
            }
            if (config.createStubs) {
                this.createFileStubs(config.outputPath);
            }
            return {
                success: true,
                data: createdPaths,
                metadata: { totalCreated: createdPaths.length, outputPath: config.outputPath }
            };
        } catch (error) {
            const message = error instanceof Error ? error.message : String(error);
            return { success: false, error: message };
        }
    }

    private createNodesRecursively(nodes: TreeNode[], basePath: string, createdPaths: string[], overwrite: boolean): void {
        for (const node of nodes) {
            const fullPath = path.join(basePath, node.name);
            if (node.type === 'directory') {
                if (!fs.existsSync(fullPath)) {
                    fs.mkdirSync(fullPath, { recursive: true });
                    createdPaths.push(fullPath);
                }
                if (node.children && node.children.length > 0) {
                    this.createNodesRecursively(node.children, fullPath, createdPaths, overwrite);
                }
            } else {
                if (!fs.existsSync(fullPath) || overwrite) {
                    const content = node.metadata?.content || ''; // –§–∞–π–ª—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ parseMarkdown, –º–æ–≥—É—Ç –Ω–µ –∏–º–µ—Ç—å content –≤ metadata
                    fs.writeFileSync(fullPath, content);
                    createdPaths.push(fullPath);
                }
            }
        }
    }

    // generateTreeString –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è README, –µ–≥–æ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å –∏–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å AsciiLeg
    private generateTreeString(nodes: TreeNode[], depth: number = 0, parentPrefix: string = ""): string {
        let result = '';
        nodes.forEach((node, index) => {
            const isLast = index === nodes.length - 1;
            const connector = isLast ? '‚îî‚îÄ‚îÄ ' : '‚îú‚îÄ‚îÄ ';
            const childPrefix = parentPrefix + (isLast ? '    ' : '‚îÇ   ');
            result += parentPrefix + connector + node.name + (node.type === 'directory' ? '/' : '') + '\n';
            if (node.children && node.children.length > 0) {
                result += this.generateTreeString(node.children, depth + 1, childPrefix);
            }
        });
        return result;
    }

    private createReadme(outputPath: string, nodes: TreeNode[]): void {
        const projectName = path.basename(outputPath);
        // –î–ª—è README –∏—Å–ø–æ–ª—å–∑—É–µ–º AsciiLeg –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ä–µ–≤–∞, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–ª–∏ —Ç–µ–∫—É—â–∏–π generateTreeString
        // –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Å –≤—ã–≤–æ–¥–æ–º AsciiLeg
        // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º generateTreeString, –Ω–æ –ª—É—á—à–µ –±—ã —ç—Ç–æ –¥–µ–ª–∞–ª AsciiLeg
        const treeString = this.generateTreeString(nodes); // nodes - —ç—Ç–æ –∫–æ—Ä–Ω–µ–≤—ã–µ —É–∑–ª—ã –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞

        const content = `# ${projectName}\n\n## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞\n\n\`\`\`\n${treeString}\`\`\`\n`;
        const readmePath = path.join(outputPath, 'README.md');
        if (!fs.existsSync(readmePath) || (fs.statSync(readmePath).size === 0)) { // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º, –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π
            fs.writeFileSync(readmePath, content);
        }
    }

    private createGitignore(outputPath: string): void {
        const content = `node_modules/\n.DS_Store\n*.log\ndist/\nbuild/\n.env\n.vscode/\n.idea/`;
        const gitignorePath = path.join(outputPath, '.gitignore');
        if (!fs.existsSync(gitignorePath)) {
            fs.writeFileSync(gitignorePath, content);
        }
    }

    private createFileStubs(outputPath: string): void {
        // –õ–æ–≥–∏–∫–∞ –∑–∞–≥–ª—É—à–µ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π
        const templates: Record<string, string> = {
            '.js': '// TODO: Implement JavaScript functionality\n',
            '.ts': '// TODO: Implement TypeScript functionality\n',
            '.html': '<!DOCTYPE html>\n<html>\n<head><title>Page</title></head>\n<body><h1>Hello!</h1></body>\n</html>',
            '.css': '/* Add your styles here */\n',
            '.md': '# New Markdown File\n\n',
            '.json': '{\n  "key": "value"\n}\n'
        };
        this.processDirectoryForStubs(outputPath, templates);
    }

    private processDirectoryForStubs(dirPath: string, templates: Record<string, string>): void {
        const items = fs.readdirSync(dirPath);
        for (const item of items) {
            const itemPath = path.join(dirPath, item);
            if (fs.statSync(itemPath).isDirectory()) {
                this.processDirectoryForStubs(itemPath, templates);
            } else if (fs.statSync(itemPath).size === 0) {
                const ext = path.extname(item);
                if (templates[ext] && item.toLowerCase() !== 'readme.md') {
                    fs.writeFileSync(itemPath, templates[ext]);
                }
            }
        }
    }
}

/**
 * ASCII Leg - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ASCII –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
 */
export class AsciiLeg implements Leg<AsciiConfig> {
    generate(nodes: TreeNode[], config: AsciiConfig = {}): TransformResult<string> {
        try {
            const ascii = this.generateAsciiTree(nodes, config, 0, "");
            return {
                success: true,
                data: ascii,
                metadata: { linesCount: ascii.split('\n').filter(Boolean).length, config }
            };
        } catch (error) {
            const message = error instanceof Error ? error.message : String(error);
            return { success: false, error: message };
        }
    }

    private generateAsciiTree(nodes: TreeNode[], config: AsciiConfig, depth: number = 0, parentPrefix: string = ""): string {
        if (config.maxDepth && depth >= config.maxDepth) {
            return '';
        }
        let result = '';
        const filteredNodes = nodes.filter(node => {
            if (config.showFiles === false && node.type === 'file') return false;
            if (config.excludeDirs && node.type === 'directory' && config.excludeDirs.includes(node.name)) return false;
            return true;
        });

        filteredNodes.forEach((node, index) => {
            const isLast = index === filteredNodes.length - 1;
            const connector = isLast ? '‚îî‚îÄ‚îÄ ' : '‚îú‚îÄ‚îÄ ';
            const childPrefix = parentPrefix + (isLast ? '    ' : '‚îÇ   ');
            result += parentPrefix + connector + node.name + (node.type === 'directory' ? '/' : '') + '\n';
            if (node.children && node.children.length > 0) {
                result += this.generateAsciiTree(node.children, config, depth + 1, childPrefix);
            }
        });
        return result;
    }
}

/**
 * Markdown Leg - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Markdown —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
 * –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
 */
export class MarkdownLeg implements Leg<MarkdownConfig> {
    generate(nodes: TreeNode[], config: MarkdownConfig = {}): TransformResult<string> {
        try {
            const markdown = this.generateMarkdownTree(nodes, config, 1); // –ù–∞—á–∏–Ω–∞–µ–º —Å —É—Ä–æ–≤–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ 1
            return {
                success: true,
                data: markdown.trim(), // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ –∫–æ–Ω—Ü–µ
                metadata: { linesCount: markdown.split('\n').filter(Boolean).length, config }
            };
        } catch (error) {
            const message = error instanceof Error ? error.message : String(error);
            return { success: false, error: message };
        }
    }

    private generateMarkdownTree(nodes: TreeNode[], config: MarkdownConfig, currentDepth: number): string {
        let result = '';
        const maxHeaderLevel = config.maxHeaderLevel || 6; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ 6 —É—Ä–æ–≤–Ω—è

        for (const node of nodes) {
            if (node.type === 'directory') {
                const headerLevel = Math.min(currentDepth, maxHeaderLevel);
                result += '#'.repeat(headerLevel) + ' ' + node.name + '\n'; // –û–¥–∏–Ω –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —É–∑–µ–ª
                if (node.children && node.children.length > 0) {
                    result += '\n';
                }

                if (node.children && node.children.length > 0) {
                    result += this.generateMarkdownTree(node.children, config, currentDepth + 1);
                }
                // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –±–ª–æ–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
                if (currentDepth === 1 && node !== nodes[nodes.length -1] && node.children.length > 0) {
                    result += '\n';
                }


            } else if (node.type === 'file') {
                // –§–∞–π–ª—ã (–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–ø–µ—Ä—å —è–≤–ª—è—é—Ç—Å—è –æ–±—ã—á–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ Markdown) –≤—ã–≤–æ–¥—è—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å
                result += node.name + '\n';
            }
        }
        return result;
    }
}

/**
 * JSON Leg - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JSON –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
 */
export class JsonLeg implements Leg {
    generate(nodes: TreeNode[]): TransformResult<object> {
        try {
            // –î–ª—è JSON'–∞ –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º, –µ—Å–ª–∏ nodes - —ç—Ç–æ –º–∞—Å—Å–∏–≤ –∫–æ—Ä–Ω–µ–≤—ã—Ö —É–∑–ª–æ–≤,
            // –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º, –µ—Å–ª–∏ –º—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –¥–µ—Ä–µ–≤–æ –∫–∞–∫ –æ–¥–∏–Ω –∫–æ—Ä–Ω–µ–≤–æ–π –æ–±—ä–µ–∫—Ç.
            // –¢–µ–∫—É—â–∏–π nodesToJson —Å–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç, –≥–¥–µ –∫–ª—é—á–∏ - –∏–º–µ–Ω–∞ —É–∑–ª–æ–≤.
            // –ï—Å–ª–∏ nodes - —ç—Ç–æ –º–∞—Å—Å–∏–≤ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ—Ä–Ω–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, nodesToJson –∏—Ö –æ–±—ä–µ–¥–∏–Ω–∏—Ç –≤ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç.
            // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –≤—Å–µ–≥–¥–∞ –∂–µ–ª–∞–µ–º—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –º–∞—Å—Å–∏–≤ –∫–æ—Ä–Ω–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
            // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫, –Ω–æ —ç—Ç–æ –º–µ—Å—Ç–æ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è.
            const jsonOutput = this.nodesToJson(nodes);
            return {
                success: true,
                data: jsonOutput, // nodesToJson —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç/–º–∞—Å—Å–∏–≤
                metadata: { nodeCount: this.countNodes(nodes) }
            };
        } catch (error) {
            const message = error instanceof Error ? error.message : String(error);
            return { success: false, error: message };
        }
    }

    private nodesToJson(nodes: TreeNode[]): any {
        // –ï—Å–ª–∏ –Ω–∞ –≤—Ö–æ–¥–µ –º–∞—Å—Å–∏–≤ –∏–∑ –æ–¥–Ω–æ–≥–æ —É–∑–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π,
        // —Ç–æ –ª—É—á—à–µ –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∫ –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ —Å–∞–º —É–∑–µ–ª.
        // –≠—Ç–æ —Å–¥–µ–ª–∞–µ—Ç JSON –±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏–º –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫.
        if (nodes.length === 1 && nodes[0].type === 'directory') {
            const rootNode = nodes[0];
            const childrenObject: any = {};
            if (rootNode.children && rootNode.children.length > 0) {
                rootNode.children.forEach(child => {
                    if (child.type === 'directory') {
                        childrenObject[child.name] = this.nodesToJson([child]); // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
                    } else {
                        childrenObject[child.name] = child.metadata?.content === undefined ? null : child.metadata.content;
                    }
                });
            }
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç, –≥–¥–µ –∫–ª—é—á - –∏–º—è –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - –µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            const result: any = {};
            result[rootNode.name] = childrenObject;
            return result;

        }

        // –ò–Ω–∞—á–µ, –µ—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤—ã—Ö –ø–∞–ø–æ–∫, —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –Ω–∏—Ö
        const result: any = {};
        for (const node of nodes) {
            if (node.type === 'directory') {
                result[node.name] = this.nodesToJson(node.children); // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            } else {
                // –î–ª—è —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ parseMarkdown –Ω–µ –∫–ª–∞–¥–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –≤ metadata,
                // —Ç–æ –∏–º—è —Ñ–∞–π–ª–∞ –∏ –µ—Å—Ç—å –µ–≥–æ "—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ" —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è Markdown-–ø–∞—Ä—Å–µ—Ä–∞.
                // JsonLeg –º–æ–∂–µ—Ç —Ä–µ—à–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —ç—Ç–æ –∫–∞–∫ { "filename.txt": null } –∏–ª–∏ —á—Ç–æ-—Ç–æ –∏–Ω–æ–µ.
                // –ï—Å–ª–∏ Brain.parseMarkdown —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ node.name –¥–ª—è —Ñ–∞–π–ª–æ–≤,
                // —Ç–æ –∑–¥–µ—Å—å –º—ã –º–æ–∂–µ–º –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å null, –ª–∏–±–æ node.name –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ.
                // –£—á–∏—Ç—ã–≤–∞—è, —á—Ç–æ parseMarkdown —Ç–µ–ø–µ—Ä—å –∫–ª–∞–¥–µ—Ç –≤—Å—é —Å—Ç—Ä–æ–∫—É –≤ node.name,
                // –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç metadata.content –¥–ª—è —ç—Ç–æ–≥–æ, –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å null
                // –∏–ª–∏ —Ä–µ—à–∏—Ç—å, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –±—É–¥–µ—Ç —Å–∞–º–æ –∏–º—è —Ñ–∞–π–ª–∞ (—á—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ –¥–ª—è JSON).
                // –û—Å—Ç–∞–≤–∏–º null, –µ—Å–ª–∏ –Ω–µ—Ç metadata.content.
                result[node.name] = node.metadata?.content === undefined ? null : node.metadata.content;
            }
        }
        return result;
    }

    private countNodes(nodes: TreeNode[]): number { // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        let count = 0;
        for (const node of nodes) {
            count++;
            if (node.children) {
                count += this.countNodes(node.children);
            }
        }
        return count;
    }
}

/**
 * SVG Leg - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SVG –¥–∏–∞–≥—Ä–∞–º–º—É –¥–µ—Ä–µ–≤–∞
 */
export class SvgLeg implements Leg {
    generate(nodes: TreeNode[], config?: { showFiles?: boolean, maxDepth?: number }): TransformResult<string> {
        try {
            const svg = this.generateSvgTree(nodes, config);
            return {
                success: true,
                data: svg,
                metadata: { format: 'svg', nodeCount: this.countNodes(nodes) }
            };
        } catch (error) {
            const message = error instanceof Error ? error.message : String(error);
            return { success: false, error: message };
        }
    }

    private generateSvgTree(nodes: TreeNode[], config?: { showFiles?: boolean, maxDepth?: number }, depth: number = 0): string {
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è SVG –Ω–∞ –æ—Å–Ω–æ–≤–µ config
        const CfgShowFiles = config?.showFiles === undefined ? true : config.showFiles;
        const CfgMaxDepth = config?.maxDepth === undefined ? Infinity : config.maxDepth;

        if (depth >= CfgMaxDepth) return "";

        const filteredNodes = nodes.filter(node => {
            if (!CfgShowFiles && node.type === 'file') return false;
            return true;
        });


        const nodeHeight = 30;
        const nodeWidth = 120;
        const verticalSpacing = 10;
        const horizontalSpacing = 50;
        const padding = 20;

        let elements = '';
        let currentY = padding;
        let maxWidth = 0;

        const processNode = (node: TreeNode, x: number, y: number, currentDepth: number): { height: number, svgElements: string, childrenMaxWidth: number } => {
            if (currentDepth >= CfgMaxDepth) return { height: 0, svgElements: "", childrenMaxWidth: x + nodeWidth };

            const nodeIsFile = node.type === 'file';
            if (!CfgShowFiles && nodeIsFile) return { height: 0, svgElements: "", childrenMaxWidth: x };


            const rectClass = nodeIsFile ? 'file-node' : 'dir-node';
            const icon = nodeIsFile ? 'üìÑ' : 'üìÅ';
            const textName = node.name.length > 12 ? node.name.substring(0, 10) + '..' : node.name;

            let nodeSvg = `<g transform="translate(${x}, ${y})">`;
            nodeSvg += `<rect width="${nodeWidth}" height="${nodeHeight}" rx="5" class="${rectClass}"/>`;
            nodeSvg += `<text x="5" y="${nodeHeight / 2}" dy="0.35em" class="node-text" fill="white">${icon} ${textName}</text>`;
            nodeSvg += `</g>`;

            let childrenHeight = 0;
            let childrenSvg = "";
            let childrenMaxWidth = x + nodeWidth;

            if (node.children && node.children.length > 0) {
                let childYoffset = nodeHeight + verticalSpacing;
                node.children.filter(child => CfgShowFiles || child.type === 'directory').forEach(child => {
                    if (currentDepth + 1 < CfgMaxDepth) {
                        const childResult = processNode(child, x + horizontalSpacing, y + childYoffset, currentDepth + 1);
                        if (childResult.svgElements) {
                            // –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è –∫ —Ä–µ–±–µ–Ω–∫—É
                            childrenSvg += `<line x1="${x + nodeWidth / 2}" y1="${y + nodeHeight}" x2="${x + horizontalSpacing + nodeWidth / 2}" y2="${y + childYoffset + nodeHeight / 2}" class="connection"/>`;
                            childrenSvg += childResult.svgElements;
                            childYoffset += childResult.height + verticalSpacing;
                            childrenHeight += childResult.height + verticalSpacing;
                            childrenMaxWidth = Math.max(childrenMaxWidth, childResult.childrenMaxWidth);
                        }
                    }
                });
                if (childrenHeight > 0) childrenHeight -= verticalSpacing; // –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—Å—Ç—É–ø
            }

            return {
                height: nodeHeight + (childrenHeight > 0 ? verticalSpacing + childrenHeight : 0),
                svgElements: nodeSvg + childrenSvg,
                childrenMaxWidth
            };
        };

        let totalHeight = 0;
        let prevNodeEndY = 0;

        filteredNodes.forEach(node => {
            const result = processNode(node, padding, totalHeight + padding, 0);
            elements += result.svgElements;
            totalHeight += result.height + verticalSpacing;
            maxWidth = Math.max(maxWidth, result.childrenMaxWidth);
        });
        if (totalHeight > 0) totalHeight -= verticalSpacing; // –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—Å—Ç—É–ø


        const finalWidth = maxWidth + padding;
        const finalHeight = totalHeight + padding;

        let svg = `<svg width="${finalWidth}" height="${finalHeight}" xmlns="http://www.w3.org/2000/svg">`;
        svg += '<style>.dir-node { fill: #4A90E2; stroke: #357ABD; } .file-node { fill: #7ED321; stroke: #68B319; } .node-text { font-family: Inter, sans-serif; font-size: 11px; } .connection { stroke: #999; stroke-width: 1; }</style>';
        svg += elements;
        svg += '</svg>';
        return svg;
    }

    // calculatePositions –∏ —Å—Ç–∞—Ä—ã–π countNodes –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã, –µ—Å–ª–∏ SvgLeg –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Å–∞–º
}

/**
 * –§–∞–±—Ä–∏–∫–∞ Legs
 */
export class LegFactory {
    static create(format: string): Leg {
        switch (format.toLowerCase()) {
            case 'filesystem':
            case 'fs':
                return new FileSystemLeg();
            case 'ascii':
                return new AsciiLeg();
            case 'markdown':
            case 'md':
                return new MarkdownLeg();
            case 'json':
                return new JsonLeg();
            case 'svg':
                return new SvgLeg();
            default:
                throw new Error(`Unknown leg format: ${format}`);
        }
    }

    static getAvailableFormats(): string[] {
        return ['filesystem', 'fs', 'ascii', 'markdown', 'md', 'json', 'svg'];
    }
}
