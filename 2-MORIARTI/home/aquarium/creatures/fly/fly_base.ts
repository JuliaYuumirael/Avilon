/**
 * ü™∞ Fly - –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –º—É—Ö–∏-—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä–∞
 */

import { Brain } from './fly_brain';
import { EyeFactory } from './fly_eyes';
import { LegFactory } from './fly_legs'; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ—Ç —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç LegFactory
import {
    TreeNode,
    TreeFormat,
    TransformConfig,
    TransformResult, // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ TransformResult —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ fly_interfaces
    TreeStats
} from './fly_interfaces';

export class Fly {
    private brain: Brain;

    constructor() {
        this.brain = new Brain();
    }

    transform<TConfig extends TransformConfig = TransformConfig>(
        input: string,
        fromFormat: TreeFormat,
        toFormat: TreeFormat,
        config?: TConfig
    ): TransformResult { // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ TransformResult –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–¥–µ—Å—å
        try {
            const eye = EyeFactory.create(fromFormat);
            const cleanInput = eye.clean(input);

            let abstractTree = this.brain.parseToAbstract(cleanInput, fromFormat);

            // === –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ===
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º buggybug.md –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ ASCII
            if (fromFormat === 'ascii') {
                abstractTree = this.brain.removeBuggybugNodes(abstractTree);
            }
            // =======================

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ LegFactory.create –≤–µ—Ä–Ω—É–ª —á—Ç–æ-—Ç–æ –∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥ generate
            const leg = LegFactory.create(toFormat);
            if (!leg || typeof leg.generate !== 'function') {
                throw new Error(`Leg for format "${toFormat}" could not be created or has no generate method.`);
            }
            const generationResult = leg.generate(abstractTree, config);

            // Leg.generate –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ–±—ä–µ–∫—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å TransformResult,
            // –∏–ª–∏ –º—ã –¥–æ–ª–∂–Ω—ã –æ–±–µ—Ä–Ω—É—Ç—å –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
            // –ï—Å–ª–∏ leg.generate —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç TransformResult:
            if (typeof generationResult === 'object' && 'success' in generationResult) {
                return generationResult as TransformResult;
            } else {
                // –ï—Å–ª–∏ leg.generate –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –æ–±—ä–µ–∫—Ç)
                return {
                    success: true,
                    data: generationResult
                    // metadata –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å, –µ—Å–ª–∏ leg –µ–≥–æ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç
                };
            }

        } catch (error) {
            const message = error instanceof Error ? error.message : String(error);
            return {
                success: false,
                error: message
            };
        }
    }

    table(asciiTree: string, outputPath: string, options: {
        createReadme?: boolean;
        createGitignore?: boolean;
        createStubs?: boolean;
        overwrite?: boolean;
    } = {}): TransformResult<string[]> { // –£—Ç–æ—á–Ω–∏–ª —Ç–∏–ø –¥–ª—è data
        return this.transform(asciiTree, 'ascii', 'filesystem', {
            outputPath,
            ...options
        }) as TransformResult<string[]>; // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞, –µ—Å–ª–∏ transform –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–∏–π TransformResult
    }

    untable(inputPath: string, options: {
        maxDepth?: number;
        showFiles?: boolean;
        excludeDirs?: string[];
    } = {}): TransformResult<string> { // –£—Ç–æ—á–Ω–∏–ª —Ç–∏–ø –¥–ª—è data
        return this.transform(inputPath, 'filesystem', 'ascii', options) as TransformResult<string>;
    }

    asciiToMarkdown(asciiTree: string, options: {
        maxHeaderLevel?: number;
        includeFileContent?: boolean;
    } = {}): TransformResult<string> {
        return this.transform(asciiTree, 'ascii', 'markdown', options) as TransformResult<string>;
    }

    asciiToJson(asciiTree: string): TransformResult<object> { // data –º–æ–∂–µ—Ç –±—ã—Ç—å object
        return this.transform(asciiTree, 'ascii', 'json') as TransformResult<object>;
    }

    asciiToSvg(asciiTree: string): TransformResult<string> {
        return this.transform(asciiTree, 'ascii', 'svg') as TransformResult<string>;
    }

    markdownToAscii(markdownTree: string, options: {
        maxDepth?: number;
        showFiles?: boolean;
    } = {}): TransformResult<string> {
        return this.transform(markdownTree, 'markdown', 'ascii', options) as TransformResult<string>;
    }

    jsonToAscii(jsonTree: string, options: {
        maxDepth?: number;
        showFiles?: boolean;
    } = {}): TransformResult<string> {
        return this.transform(jsonTree, 'json', 'ascii', options) as TransformResult<string>;
    }


    getTreeStats(input: string, format: TreeFormat): TreeStats | null {
        try {
            const eye = EyeFactory.create(format);
            const cleanInput = eye.clean(input);
            const abstractTree = this.brain.parseToAbstract(cleanInput, format);
            // –£–¥–∞–ª—è–µ–º buggybug –ø–µ—Ä–µ–¥ –ø–æ–¥—Å—á–µ—Ç–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª ASCII
            // –≠—Ç–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∏—Ö —É—á–∏—Ç—ã–≤–∞—Ç—å
            // if (format === 'ascii') {
            //    const cleanedTreeForStats = this.brain.removeBuggybugNodes(abstractTree);
            //    return this.brain.getTreeStats(cleanedTreeForStats);
            // }
            return this.brain.getTreeStats(abstractTree);
        } catch (error) {
            console.error(`Error in getTreeStats: ${error instanceof Error ? error.message : String(error)}`);
            return null;
        }
    }

    validateInput(input: string, format: TreeFormat): { valid: boolean; error?: string } {
        try {
            const eye = EyeFactory.create(format);
            eye.clean(input); // –ü—Ä–æ—Å—Ç–æ –ø—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫ - –≤–∞–ª–∏–¥–Ω–æ
            // –î–ª—è –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
            // this.brain.parseToAbstract(cleanedInput, format);
            return { valid: true };
        } catch (error) {
            const message = error instanceof Error ? error.message : String(error);
            return { valid: false, error: message };
        }
    }

    getAvailableFormats(): {
        input: string[];
        output: string[];
    } {
        return {
            input: EyeFactory.getAvailableFormats(),
            output: LegFactory.getAvailableFormats() // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ LegFactory –∏–º–µ–µ—Ç —ç—Ç–æ—Ç –º–µ—Ç–æ–¥
        };
    }

    debugShowAbstractTree(input: string, format: TreeFormat): void {
        try {
            const eye = EyeFactory.create(format);
            const cleanInput = eye.clean(input);
            let abstractTree = this.brain.parseToAbstract(cleanInput, format);

            console.log('ü™∞ Abstract Tree (before buggybug removal, if applicable):');
            this.brain.debugPrintTree(abstractTree);


            if (format === 'ascii') {
                const treeWithoutBugs = this.brain.removeBuggybugNodes([...abstractTree]); // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                console.log('\nü™∞ Abstract Tree (after buggybug removal for ASCII):');
                this.brain.debugPrintTree(treeWithoutBugs);
                const statsAfterRemoval = this.brain.getTreeStats(treeWithoutBugs);
                console.log('üìä Tree Stats (after buggybug removal for ASCII):', statsAfterRemoval);
                return;
            }

            const stats = this.brain.getTreeStats(abstractTree);
            console.log('üìä Tree Stats:', stats);

        } catch (error) {
            const message = error instanceof Error ? error.message : String(error);
            console.error('‚ùå Debug error:', message);
        }
    }
    batchTransform(operations: Array<{
        input: string;
        fromFormat: TreeFormat;
        toFormat: TreeFormat;
        config?: TransformConfig;
    }>): TransformResult[] {
        return operations.map(op =>
            this.transform(op.input, op.fromFormat, op.toFormat, op.config)
        );
    }

    chainTransform(
        input: string,
        chain: Array<{ format: TreeFormat; config?: TransformConfig }>
    ): TransformResult {
        if (!chain || chain.length === 0) {
            return { success: false, error: "Transformation chain is empty." };
        }

        let currentData = input;
        // –ü–µ—Ä–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ —Ü–µ–ø–æ—á–∫–µ - —ç—Ç–æ fromFormat –¥–ª—è –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        // –ù–æ transform –æ–∂–∏–¥–∞–µ—Ç fromFormat –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç.
        // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ü–µ–ø–æ—á–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
        // –≠—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º –ª–æ–≥–∏—á–Ω–æ, —Ç–∞–∫ –∫–∞–∫ `input` —É–∂–µ –∏–º–µ–µ—Ç –Ω–µ–∫–∏–π `fromFormat`.
        // –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏–º: `chain` –¥–æ–ª–∂–µ–Ω –æ–ø–∏—Å—ã–≤–∞—Ç—å –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨ –¶–ï–õ–ï–í–´–• —Ñ–æ—Ä–º–∞—Ç–æ–≤.
        // –ù–∞—á–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç `fromFormat` –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ.

        // –ü—Ä–∏–º–µ—Ä: transform(input, initialFromFormat, chain[0].format, chain[0].config)
        //         then result.data, chain[0].format, chain[1].format, chain[1].config

        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ `input` —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è `fromFormat`
        // –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏, —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤ `chain[0]`.
        // –≠—Ç–æ –Ω–µ—è–≤–Ω–æ–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –õ—É—á—à–µ –±—ã `chain` –±—ã–ª –≤–∏–¥–∞:
        // [{ from: 'ascii', to: 'json'}, {from: 'json', to: 'markdown'}]
        // –ò–ª–∏, –µ—Å–ª–∏ `chain` —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å `toFormat`:
        // chainTransform(input: string, initialFromFormat: TreeFormat, chain: Array<{ targetFormat: TreeFormat; config?: TransformConfig }>)

        // –¢–µ–∫—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è chainTransform –≤ –≤–∞—à–µ–º –∫–æ–¥–µ –∏–º–µ–µ—Ç —ç—Ç—É –Ω–µ—è—Å–Ω–æ—Å—Ç—å.
        // –Ø –æ—Å—Ç–∞–≤–ª—é –µ–µ –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ –æ—Ç–º–µ—á—É —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç.
        // `currentFormat` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–æ—Ä–º–∞—Ç–æ–º `currentData`.
        // –ï—Å–ª–∏ `chain[0].format` —ç—Ç–æ *—Ü–µ–ª–µ–≤–æ–π* —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Ç–æ –Ω–∞–º –Ω—É–∂–µ–Ω *–∏—Å—Ö–æ–¥–Ω—ã–π* —Ñ–æ—Ä–º–∞—Ç `input`.
        // –î–æ–ø—É—Å—Ç–∏–º, `chain[0].format` —ç—Ç–æ —Ñ–æ—Ä–º–∞—Ç, *–≤ –∫–æ—Ç–æ—Ä—ã–π* –Ω—É–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å `input`.
        // –¢–æ–≥–¥–∞ –Ω–∞–º –Ω—É–∂–µ–Ω `initialFromFormat`.

        // –î–∞–≤–∞–π—Ç–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ `chain[0].format` —ç—Ç–æ *–∏—Å—Ö–æ–¥–Ω—ã–π* —Ñ–æ—Ä–º–∞—Ç `input`,
        // –∞ `chain[1].format` —ç—Ç–æ *—Ü–µ–ª–µ–≤–æ–π* —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        if (chain.length < 2) {
            return { success: false, error: "Transformation chain must have at least two steps (from -> to)." };
        }

        currentData = input;
        let currentFormat = chain[0].format; // –§–æ—Ä–º–∞—Ç —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö currentData

        for (let i = 1; i < chain.length; i++) {
            const targetFormat = chain[i].format;
            const config = chain[i].config;

            const result = this.transform(currentData, currentFormat, targetFormat, config);

            if (!result.success) {
                return result; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–µ–ø–æ—á–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
            }

            // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ JSON).
            currentData = (typeof result.data === 'object' && result.data !== null) ? JSON.stringify(result.data) : String(result.data);
            currentFormat = targetFormat; // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        return {
            success: true,
            data: currentData, // currentData —É–∂–µ –±—É–¥–µ—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º targetFormat (–≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ JSON-—Å—Ç—Ä–æ–∫–∏)
            metadata: { transformChainApplied: chain.map(c => c.format) }
        };
    }
}
