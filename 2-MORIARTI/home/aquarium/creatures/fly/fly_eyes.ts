/**
 * üëÅÔ∏è Eyes - –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 *
 * –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: –æ—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–∑–≥–∞
 * –ö–∞–∂–¥—ã–π Eye –∑–Ω–∞–µ—Ç, –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–≤–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
 */

import { Eye } from './fly_interfaces';

/**
 * ASCII Eye - –æ—á–∏—â–∞–µ—Ç ASCII –¥–µ—Ä–µ–≤—å—è –æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –º—É—Å–æ—Ä–∞.
 * –î–æ–±–∞–≤–ª—è–µ—Ç buggybug.md –≤ –ø—É—Å—Ç—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
 */
export class AsciiEye implements Eye {
    clean(rawInput: string): string {
        const initialLines = rawInput.split('\n');
        const tempCleanedLines: string[] = [];

        // –®–∞–≥ 1: –ù–∞—á–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –ø—Ä–æ–±–µ–ª—ã —Å–ø—Ä–∞–≤–∞, –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏)
        for (let line of initialLines) {
            const commentIndex = line.indexOf('#');
            if (commentIndex !== -1) {
                line = line.substring(0, commentIndex);
            }
            line = line.trimRight(); // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã —Ç–æ–ª—å–∫–æ —Å–ø—Ä–∞–≤–∞
            if (line.trim().length > 0) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–ª–∏ –ø—É—Å—Ç—ã–º–∏ –ü–û–°–õ–ï trim()
                tempCleanedLines.push(line);
            }
        }

        const finalCleanedLines: string[] = [];
        // –®–∞–≥ 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ buggybug.md –≤ –ø—É—Å—Ç—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for (let i = 0; i < tempCleanedLines.length; i++) {
            const currentLine = tempCleanedLines[i];
            finalCleanedLines.push(currentLine); // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É

            const currentConnectorIndex = this.getAsciiConnectorIndex(currentLine);

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —ç–ª–µ–º–µ–Ω—Ç–∞
            let rawName = "";
            if (currentConnectorIndex !== -1) { // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä (‚îú –∏–ª–∏ ‚îî)
                const nameMatch = currentLine.substring(currentConnectorIndex).match(/[‚îú‚îî]‚îÄ‚îÄ\s*(.*)/);
                rawName = nameMatch && nameMatch[1] ? nameMatch[1].trim() : "";
            } else if (this.isRootLevelItem(currentLine)) { // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
                rawName = currentLine.trim();
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π
            const isPotentiallyDirectory = rawName !== "" &&
                (rawName.endsWith('/') || !rawName.includes('.')) &&
                rawName !== "buggybug.md";

            if (isPotentiallyDirectory) {
                const nextLine = (i + 1 < tempCleanedLines.length) ? tempCleanedLines[i + 1] : null;
                const nextConnectorIndex = nextLine ? this.getAsciiConnectorIndex(nextLine) : -2;

                let isDirEmpty = false;
                if (!nextLine) {
                    isDirEmpty = true;
                } else {
                    if (currentConnectorIndex !== -1) {
                        if (nextConnectorIndex <= currentConnectorIndex || nextConnectorIndex === -1) {
                            isDirEmpty = true;
                        }
                    } else {
                        if (nextConnectorIndex === -1 || !nextLine) {
                            isDirEmpty = true;
                        }
                    }
                }

                if (isDirEmpty) {
                    let buggybugLine = "";
                    if (currentConnectorIndex !== -1) {
                        const visualPrefixMatch = currentLine.match(/^([‚îÇ\s]*)([‚îú‚îî])‚îÄ‚îÄ.*$/);
                        if (visualPrefixMatch) {
                            const parentPrefix = visualPrefixMatch[1];
                            const parentConnector = visualPrefixMatch[2];
                            const childContinuation = parentConnector === '‚îú' ? '‚îÇ   ' : '    ';
                            buggybugLine = `${parentPrefix}${childContinuation}‚îî‚îÄ‚îÄ buggybug.md`;
                        } else {
                            buggybugLine = `${"    ".repeat(Math.max(0, (currentLine.length - currentLine.trimLeft().length) / 4))}‚îî‚îÄ‚îÄ buggybug.md`;
                        }
                    } else {
                        buggybugLine = `‚îî‚îÄ‚îÄ buggybug.md`;
                    }
                    finalCleanedLines.push(buggybugLine);
                }
            }
        }
        return finalCleanedLines.join('\n');
    }

    private isRootLevelItem(line: string): boolean {
        const trimmedLine = line.trimLeft();
        return trimmedLine === line && this.getAsciiConnectorIndex(line) === -1;
    }

    private getAsciiConnectorIndex(line: string): number {
        return line.search(/[‚îú‚îî]/);
    }
}

/**
 * Markdown Eye - –æ—á–∏—â–∞–µ—Ç Markdown –æ—Ç –ª–∏—à–Ω–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export class MarkdownEye implements Eye {
    clean(rawInput: string): string {
        const lines = rawInput.split('\n');
        const cleanedLines: string[] = [];

        for (let line of lines) {
            // –£–¥–∞–ª—è–µ–º HTML –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            line = line.trim();
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if (line.length > 0) {
                cleanedLines.push(line);
            }
        }
        return cleanedLines.join('\n');
    }
}

/**
 * JSON Eye - –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç JSON
 */
export class JsonEye implements Eye {
    clean(rawInput: string): string {
        try {
            const parsed = JSON.parse(rawInput);
            return JSON.stringify(parsed, null, 2);
        } catch (error) {
            if (error instanceof Error) {
                throw new Error(`Invalid JSON input: ${error.message}`);
            }
            throw new Error('Invalid JSON input: An unknown error occurred.');
        }
    }
}

/**
 * FileSystem Eye - –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø—É—Ç–∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
export class FileSystemEye implements Eye {
    clean(rawInput: string): string {
        let path = rawInput.trim();
        if ((path.startsWith('"') && path.endsWith('"')) ||
            (path.startsWith("'") && path.endsWith("'"))) {
            path = path.slice(1, -1);
        }
        path = path.replace(/\\/g, '/');
        return path;
    }
}

/**
 * Universal Eye - –ø—ã—Ç–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
 */
export class UniversalEye implements Eye {
    private asciiEye = new AsciiEye();
    private markdownEye = new MarkdownEye();
    private jsonEye = new JsonEye();
    private filesystemEye = new FileSystemEye();

    clean(rawInput: string): string {
        const trimmed = rawInput.trim();

        if (this.looksLikeJson(trimmed)) {
            return this.jsonEye.clean(rawInput);
        } else if (this.looksLikeMarkdown(trimmed)) {
            return this.markdownEye.clean(rawInput);
        } else if (this.looksLikeFilePath(trimmed)) {
            return this.filesystemEye.clean(rawInput);
        } else {
            return this.asciiEye.clean(rawInput);
        }
    }

    private looksLikeJson(input: string): boolean {
        return (input.startsWith('{') && input.endsWith('}')) ||
            (input.startsWith('[') && input.endsWith(']'));
    }

    private looksLikeMarkdown(input: string): boolean {
        const lines = input.split('\n');
        return lines.some(line => line.match(/^#+\s+/) || line.match(/^[\s]*[-*+]\s+/));
    }

    private looksLikeFilePath(input: string): boolean {
        const hasTreeChars = input.split('\n').some(line => line.trim().match(/^(?:[‚îÇ‚îú‚îî]‚îÄ‚îÄ)/));
        return input.length < 500 &&
            !input.includes('\n') &&
            (input.includes('/') || input.includes('\\')) &&
            !hasTreeChars;
    }
}

/**
 * –§–∞–±—Ä–∏–∫–∞ Eyes
 */
export class EyeFactory {
    static create(format: string): Eye {
        switch (format.toLowerCase()) {
            case 'ascii':
                return new AsciiEye();
            case 'markdown':
            case 'md':
                return new MarkdownEye();
            case 'json':
                return new JsonEye();
            case 'filesystem':
            case 'fs':
                return new FileSystemEye();
            case 'auto':
            case 'universal':
                return new UniversalEye();
            default:
                const validFormatsFromTreeFormat: Array<string> = ['ascii', 'filesystem', 'markdown', 'json', 'svg'];
                if (validFormatsFromTreeFormat.includes(format.toLowerCase())) {
                    console.warn(`Format "${format}" recognized but using UniversalEye as fallback.`);
                    return new UniversalEye();
                }
                throw new Error(`Unknown eye format: ${format}`);
        }
    }

    static getAvailableFormats(): string[] {
        return ['ascii', 'markdown', 'md', 'json', 'filesystem', 'fs', 'auto', 'universal'];
    }
}
