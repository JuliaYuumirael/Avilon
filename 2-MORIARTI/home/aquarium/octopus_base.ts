/**
 * üêô –ë–∞–∑–æ–≤—ã–π —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –û—Å—å–º–∏–Ω–æ–≥–∞
 *
 * –§–∏–ª–æ—Å–æ—Ñ–∏—è: –ö–∞–∂–¥—ã–π –æ—Å—å–º–∏–Ω–æ–≥ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–º (–∏–º–µ–µ—Ç —â—É–ø–∞–ª—å—Ü–∞)
 * –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º (–∏–º–µ–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é). –©—É–ø–∞–ª—å—Ü–∞ - —ç—Ç–æ —Ç–æ–∂–µ –æ—Å—å–º–∏–Ω–æ–≥–∏.
 *
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞: logo + greeting + tentacles + function
 */

export interface OctopusConfig {
    logo?: string | null;
    greeting?: string | null;
    tentacles?: Octopus[];
    action?: (() => Promise<void>) | (() => void) | null;
}

export class Octopus {
    public logo: string | null;
    public greeting: string | null;
    public tentacles: Octopus[];
    public action: (() => Promise<void>) | (() => void) | null;

    constructor(config: OctopusConfig = {}) {
        this.logo = config.logo || null;
        this.greeting = config.greeting || null;
        this.tentacles = config.tentacles || [];
        this.action = config.action || null;
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —â—É–ø–∞–ª—å—Ü–µ (–∫–æ—Ç–æ—Ä–æ–µ —Å–∞–º–æ —è–≤–ª—è–µ—Ç—Å—è –æ—Å—å–º–∏–Ω–æ–≥–æ–º)
     */
    addTentacle(tentacle: Octopus): void {
        this.tentacles.push(tentacle);
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —â—É–ø–∞–ª—å—Ü–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É
     */
    removeTentacle(index: number): boolean {
        if (index >= 0 && index < this.tentacles.length) {
            this.tentacles.splice(index, 1);
            return true;
        }
        return false;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–º (–µ—Å—Ç—å —â—É–ø–∞–ª—å—Ü–∞)
     */
    isCoordinator(): boolean {
        return this.tentacles.length > 0;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º (–µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è)
     */
    isExecutor(): boolean {
        return this.action !== null;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø, –µ—Å–ª–∏ –µ—Å—Ç—å
     */
    showLogo(): void {
        if (this.logo) {
            console.log(this.logo);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
     */
    showGreeting(): void {
        if (this.greeting) {
            console.log(this.greeting);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —â—É–ø–∞–ª–µ—Ü (–¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤)
     */
    showTentacleMenu(): void {
        if (this.isCoordinator()) {
            this.tentacles.forEach((tentacle, index) => {
                const displayText = tentacle.greeting || `–©—É–ø–∞–ª—å—Ü–µ ${index + 1}`;
                console.log(`${index + 1}. ${displayText}`);
            });
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —â—É–ø–∞–ª—å—Ü–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É
     */
    getTentacle(index: number): Octopus | null {
        if (index >= 0 && index < this.tentacles.length) {
            return this.tentacles[index];
        }
        return null;
    }

    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ (–¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π)
     */
    async execute(): Promise<void> {
        if (this.isExecutor() && this.action) {
            await this.action();
        }
    }

    /**
     * –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ CLI –º–µ–Ω—é (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
     */
    async run(): Promise<void> {
        this.showLogo();
        this.showGreeting();

        if (this.isExecutor()) {
            // –≠—Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            await this.execute();
        } else if (this.isCoordinator()) {
            // –≠—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            this.showTentacleMenu();
            console.log("\n(–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ - —ç—Ç–æ –¥–µ–ª–∞–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)");
        } else {
            console.log("ü§î –≠—Ç–æ—Ç –æ—Å—å–º–∏–Ω–æ–≥ –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å...");
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
     */
    getStructureInfo(): object {
        return {
            hasLogo: this.logo !== null,
            hasGreeting: this.greeting !== null,
            tentaclesCount: this.tentacles.length,
            hasAction: this.action !== null,
            type: this.isCoordinator() ? 'coordinator' :
                this.isExecutor() ? 'executor' : 'empty',
            tentacles: this.tentacles.map((t, i) => ({
                index: i,
                info: t.getStructureInfo()
            }))
        };
    }

    /**
     * –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–µ—Ä–µ–≤–∞
     */
    printStructure(depth: number = 0, prefix: string = ""): void {
        const indent = "  ".repeat(depth);
        const type = this.isCoordinator() ? "üêô" :
            this.isExecutor() ? "ü¶æ" : "‚ùì";

        const name = this.greeting || "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –æ—Å—å–º–∏–Ω–æ–≥";
        console.log(`${indent}${prefix}${type} ${name}`);

        this.tentacles.forEach((tentacle, index) => {
            const isLast = index === this.tentacles.length - 1;
            const newPrefix = isLast ? "‚îî‚îÄ‚îÄ " : "‚îú‚îÄ‚îÄ ";
            tentacle.printStructure(depth + 1, newPrefix);
        });
    }
}