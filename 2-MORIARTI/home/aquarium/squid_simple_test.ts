/**
 * ü¶ë –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–ª—å–º–∞—Ä –ë–ï–ó readline
 *
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º –≤–≤–æ–¥–∞
 */

import { Octopus } from './octopus_base';

export class SimpleSquidTest {
    private currentOctopus: Octopus;

    constructor() {
        this.currentOctopus = this.createTestOctopus();
    }

    /**
     * –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Å—å–º–∏–Ω–æ–≥–∞
     */
    private createTestOctopus(): Octopus {
        const mainOctopus = new Octopus({
            logo: `
ü¶ë ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ü¶ë
    –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ë–ï–ó READLINE
ü¶ë ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ü¶ë`,
            greeting: "ü¶ë –ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª—å–º–∞—Ä - –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:"
        });

        // –ü—Ä–æ—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ 1
        mainOctopus.addTentacle(new Octopus({
            greeting: "–¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            action: () => {
                console.log("‚úÖ –¢–µ—Å—Ç 1 –≤—ã–ø–æ–ª–Ω–µ–Ω!");
                console.log("üéØ –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –±–µ–∑ –≤–≤–æ–¥–∞");
                console.log("üíö –ï—Å–ª–∏ –≤—ã —ç—Ç–æ –≤–∏–¥–∏—Ç–µ - –±–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!");
            }
        }));

        // –ü—Ä–æ—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ 2
        mainOctopus.addTentacle(new Octopus({
            greeting: "–¢–µ—Å—Ç 2: –°—á–µ—Ç—á–∏–∫",
            action: () => {
                console.log("‚úÖ –¢–µ—Å—Ç 2 –≤—ã–ø–æ–ª–Ω–µ–Ω!");
                for (let i = 1; i <= 5; i++) {
                    console.log(`üìä –°—á–µ—Ç—á–∏–∫: ${i}`);
                }
                console.log("üíö –°—á–µ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!");
            }
        }));

        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        mainOctopus.addTentacle(new Octopus({
            greeting: "–¢–µ—Å—Ç 3: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è",
            action: async () => {
                console.log("‚úÖ –¢–µ—Å—Ç 3 –≤—ã–ø–æ–ª–Ω–µ–Ω!");
                console.log("‚è≥ –ù–∞—á–∏–Ω–∞—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é...");

                await new Promise(resolve => setTimeout(resolve, 1000));
                console.log("üîÑ –ü–æ–ª–æ–≤–∏–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞...");

                await new Promise(resolve => setTimeout(resolve, 1000));
                console.log("üíö –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
            }
        }));

        // –í–ª–æ–∂–µ–Ω–Ω–æ–µ –º–µ–Ω—é
        const nestedMenu = new Octopus({
            greeting: "–¢–µ—Å—Ç 4: –í–ª–æ–∂–µ–Ω–Ω–æ–µ –º–µ–Ω—é"
        });

        nestedMenu.addTentacle(new Octopus({
            greeting: "–ü–æ–¥—Ç–µ—Å—Ç A",
            action: () => {
                console.log("‚úÖ –ü–æ–¥—Ç–µ—Å—Ç A –≤—ã–ø–æ–ª–Ω–µ–Ω!");
                console.log("üêô –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!");
            }
        }));

        nestedMenu.addTentacle(new Octopus({
            greeting: "–ü–æ–¥—Ç–µ—Å—Ç B",
            action: () => {
                console.log("‚úÖ –ü–æ–¥—Ç–µ—Å—Ç B –≤—ã–ø–æ–ª–Ω–µ–Ω!");
                console.log("üåä –ì–ª—É–±–æ–∫–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!");
            }
        }));

        mainOctopus.addTentacle(nestedMenu);

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        mainOctopus.addTentacle(new Octopus({
            greeting: "–¢–µ—Å—Ç 5: –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É",
            action: () => {
                console.log("‚úÖ –¢–µ—Å—Ç 5 –≤—ã–ø–æ–ª–Ω–µ–Ω!");
                console.log("üóÇÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Å—å–º–∏–Ω–æ–≥–∞:");
                this.currentOctopus.printStructure();
            }
        }));

        return mainOctopus;
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
     */
    async runAllTests(): Promise<void> {
        console.clear();

        console.log("ü¶ë === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ –í–°–ï–• –î–ï–ô–°–¢–í–ò–ô === ü¶ë\n");

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        this.currentOctopus.showLogo();
        this.currentOctopus.showGreeting();
        console.log("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã:");
        this.currentOctopus.showTentacleMenu();

        console.log("\nüîÑ –ó–∞–ø—É—Å–∫–∞—é –≤—Å–µ —Ç–µ—Å—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...\n");

        // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
        for (let i = 0; i < this.currentOctopus.tentacles.length; i++) {
            const tentacle = this.currentOctopus.tentacles[i];

            console.log(`\n${"=".repeat(50)}`);
            console.log(`üß™ –í—ã–ø–æ–ª–Ω—è—é —Ç–µ—Å—Ç ${i + 1}: ${tentacle.greeting}`);
            console.log(`${"=".repeat(50)}`);

            if (tentacle.isExecutor()) {
                await tentacle.execute();
            } else if (tentacle.isCoordinator()) {
                console.log("üìÇ –≠—Ç–æ –º–µ–Ω—é, –≤—ã–ø–æ–ª–Ω—è—é –ø–æ–¥—Ç–µ—Å—Ç—ã:");

                for (let j = 0; j < tentacle.tentacles.length; j++) {
                    const subTentacle = tentacle.tentacles[j];
                    console.log(`\n  üî∏ –ü–æ–¥—Ç–µ—Å—Ç ${j + 1}: ${subTentacle.greeting}`);
                    if (subTentacle.isExecutor()) {
                        await subTentacle.execute();
                    }
                }
            }

            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 500));
        }

        console.log(`\n${"=".repeat(50)}`);
        console.log("üéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û! üéâ");
        console.log("üíö –ë–∞–∑–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!");
        console.log(`${"=".repeat(50)}`);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ—Å—å–º–∏–Ω–æ–≥–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–∞—Ö
     */
    getOctopus(): Octopus {
        return this.currentOctopus;
    }
}

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ
if (require.main === module) {
    async function runSimpleTest() {
        console.log("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞...\n");

        const simpleTest = new SimpleSquidTest();
        await simpleTest.runAllTests();

        console.log("\nüëã –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!");
    }

    runSimpleTest().catch(console.error);
}