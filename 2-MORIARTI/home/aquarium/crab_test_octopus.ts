/**
 * ü¶Ä –¢–µ—Å—Ç–æ–≤—ã–π –ö—Ä–∞–±
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –û—Å—å–º–∏–Ω–æ–≥–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
 * –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
 */

import { Octopus } from './octopus_base';

export class CrabTestOctopus {
    private mainOctopus: Octopus;

    constructor() {
        this.mainOctopus = this.createTestEcosystem();
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —ç–∫–æ—Å–∏—Å—Ç–µ–º—É –æ—Å—å–º–∏–Ω–æ–≥–æ–≤
     */
    private createTestEcosystem(): Octopus {
        // –ì–ª–∞–≤–Ω—ã–π –æ—Å—å–º–∏–Ω–æ–≥-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
        const mainOctopus = new Octopus({
            logo: `
üåä ====== –¢–ï–°–¢–û–í–´–ô –ê–ö–í–ê–†–ò–£–ú ====== üåä
    üêô    ü¶ë    üêô    ü¶ë    üêô
  =====================================`,
            greeting: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤—É—é —ç–∫–æ—Å–∏—Å—Ç–µ–º—É! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        });

        // –©—É–ø–∞–ª—å—Ü–µ 1: –ü—Ä–æ—Å—Ç–æ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        const simpleExecutor = new Octopus({
            greeting: "–ü—Ä–æ—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            action: () => {
                console.log("ü¶æ –í—ã–ø–æ–ª–Ω—è—é –ø—Ä–æ—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!");
                console.log("‚úÖ –ü—Ä–æ—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
            }
        });

        // –©—É–ø–∞–ª—å—Ü–µ 2: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        const asyncExecutor = new Octopus({
            greeting: "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            action: async () => {
                console.log("ü¶æ –ù–∞—á–∏–Ω–∞—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ...");
                await this.delay(1000);
                console.log("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ...");
                await this.delay(1000);
                console.log("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
            }
        });

        // –©—É–ø–∞–ª—å—Ü–µ 3: –í–ª–æ–∂–µ–Ω–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
        const nestedCoordinator = new Octopus({
            greeting: "–í–ª–æ–∂–µ–Ω–Ω–æ–µ –º–µ–Ω—é",
        });

        // –ü–æ–¥—â—É–ø–∞–ª—å—Ü–∞ –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
        const subAction1 = new Octopus({
            greeting: "–ü–æ–¥–µ–π—Å—Ç–≤–∏–µ –ê",
            action: () => {
                console.log("üîÄ –í—ã–ø–æ–ª–Ω—è—é –ø–æ–¥–µ–π—Å—Ç–≤–∏–µ –ê!");
                console.log("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: –î–∞–Ω–Ω—ã–µ —Ç–∏–ø–∞ –ê –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã");
            }
        });

        const subAction2 = new Octopus({
            greeting: "–ü–æ–¥–µ–π—Å—Ç–≤–∏–µ –ë",
            action: () => {
                console.log("üîÄ –í—ã–ø–æ–ª–Ω—è—é –ø–æ–¥–µ–π—Å—Ç–≤–∏–µ –ë!");
                console.log("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: –î–∞–Ω–Ω—ã–µ —Ç–∏–ø–∞ –ë –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã");
            }
        });

        // –ï—â–µ –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∞—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å
        const deepCoordinator = new Octopus({
            greeting: "–ì–ª—É–±–æ–∫–æ–µ –º–µ–Ω—é"
        });

        const deepAction = new Octopus({
            greeting: "–û—á–µ–Ω—å –≥–ª—É–±–æ–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            action: () => {
                console.log("üèä‚Äç‚ôÇÔ∏è –ü–æ–≥—Ä—É–∂–∞—é—Å—å –Ω–∞ –≥–ª—É–±–∏–Ω—É...");
                console.log("üêô –ù–∞ –¥–Ω–µ –æ–∫–µ–∞–Ω–∞ –Ω–∞—à–µ–ª —Å–æ–∫—Ä–æ–≤–∏—â–µ!");
                console.log("üíé –°–æ–∫—Ä–æ–≤–∏—â–µ: –†–µ–∫—É—Ä—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!");
            }
        });

        deepCoordinator.addTentacle(deepAction);

        // –°–æ–±–∏—Ä–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        nestedCoordinator.addTentacle(subAction1);
        nestedCoordinator.addTentacle(subAction2);
        nestedCoordinator.addTentacle(deepCoordinator);

        // –©—É–ø–∞–ª—å—Ü–µ 4: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ
        const infoExecutor = new Octopus({
            greeting: "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É",
            action: () => {
                console.log("\nüóÇÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã:");
                this.mainOctopus.printStructure();
                console.log("\nüìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:");
                console.log(JSON.stringify(this.mainOctopus.getStructureInfo(), null, 2));
            }
        });

        // –°–æ–±–∏—Ä–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        mainOctopus.addTentacle(simpleExecutor);
        mainOctopus.addTentacle(asyncExecutor);
        mainOctopus.addTentacle(nestedCoordinator);
        mainOctopus.addTentacle(infoExecutor);

        return mainOctopus;
    }

    /**
     * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ (–¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤)
     */
    private delay(ms: number): Promise<void> {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç (–±–µ–∑ CLI –≤–≤–æ–¥–∞)
     */
    async runBasicTest(): Promise<void> {
        console.log("üß™ === –ë–ê–ó–û–í–´–ô –¢–ï–°–¢ –°–¢–†–£–ö–¢–£–†–´ === üß™\n");

        await this.mainOctopus.run();

        console.log("\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —â—É–ø–∞–ª—å—Ü–∞:\n");

        // –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        console.log("1Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è:");
        const tentacle1 = this.mainOctopus.getTentacle(0);
        if (tentacle1) await tentacle1.run();

        console.log("\n2Ô∏è‚É£ –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è:");
        const tentacle2 = this.mainOctopus.getTentacle(1);
        if (tentacle2) await tentacle2.run();

        console.log("\n3Ô∏è‚É£ –¢–µ—Å—Ç –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é:");
        const tentacle3 = this.mainOctopus.getTentacle(2);
        if (tentacle3) {
            await tentacle3.run();

            console.log("\n   3Ô∏è‚É£.1Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–¥–µ–π—Å—Ç–≤–∏—è –ê:");
            const subTentacle1 = tentacle3.getTentacle(0);
            if (subTentacle1) await subTentacle1.run();

            console.log("\n   3Ô∏è‚É£.2Ô∏è‚É£ –¢–µ—Å—Ç –≥–ª—É–±–æ–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏:");
            const deepTentacle = tentacle3.getTentacle(2);
            if (deepTentacle) {
                await deepTentacle.run();
                const veryDeep = deepTentacle.getTentacle(0);
                if (veryDeep) await veryDeep.run();
            }
        }

        console.log("\n4Ô∏è‚É£ –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è:");
        const tentacle4 = this.mainOctopus.getTentacle(3);
        if (tentacle4) await tentacle4.run();

        console.log("\n‚úÖ === –ë–ê–ó–û–í–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù === ‚úÖ");
    }

    /**
     * –¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —â—É–ø–∞–ª–µ—Ü
     */
    testDynamicTentacles(): void {
        console.log("\nüîß === –¢–ï–°–¢ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–• –©–£–ü–ê–õ–ï–¶ === üîß\n");

        const dynamicOctopus = new Octopus({
            greeting: "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –æ—Å—å–º–∏–Ω–æ–≥"
        });

        console.log("üìä –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:");
        dynamicOctopus.printStructure();

        // –î–æ–±–∞–≤–ª—è–µ–º —â—É–ø–∞–ª—å—Ü–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        dynamicOctopus.addTentacle(new Octopus({
            greeting: "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ —â—É–ø–∞–ª—å—Ü–µ 1",
            action: () => console.log("üöÄ –î–µ–π—Å—Ç–≤–∏–µ 1 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
        }));

        dynamicOctopus.addTentacle(new Octopus({
            greeting: "–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ —â—É–ø–∞–ª—å—Ü–µ 2",
            action: () => console.log("üöÄ –î–µ–π—Å—Ç–≤–∏–µ 2 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
        }));

        console.log("\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:");
        dynamicOctopus.printStructure();

        // –£–¥–∞–ª—è–µ–º —â—É–ø–∞–ª—å—Ü–µ
        console.log("\nüóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —â—É–ø–∞–ª—å—Ü–µ...");
        dynamicOctopus.removeTentacle(0);

        console.log("\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:");
        dynamicOctopus.printStructure();

        console.log("\n‚úÖ === –¢–ï–°–¢ –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–• –©–£–ü–ê–õ–ï–¶ –ó–ê–í–ï–†–®–ï–ù === ‚úÖ");
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –æ—Å—å–º–∏–Ω–æ–≥–∞ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
     */
    getMainOctopus(): Octopus {
        return this.mainOctopus;
    }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (require.main === module) {
    async function runTests() {
        const crabTest = new CrabTestOctopus();

        await crabTest.runBasicTest();
        crabTest.testDynamicTentacles();
    }

    runTests().catch(console.error);
}1