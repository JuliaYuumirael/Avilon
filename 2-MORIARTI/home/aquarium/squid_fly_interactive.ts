/**
 * ü¶ë SquidInteractive - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ª—å–º–∞—Ä –¥–ª—è –º—É—Ö–∏
 *
 * –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º readline
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –û–î–ò–ù –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
 */

import * as readline from 'readline';
import { Octopus } from './octopus_base';
import { Fly } from './creatures/fly/fly_base';
import { TreeFormat } from './creatures/fly/fly_interfaces';
import * as fs from 'fs'; // –î–æ–±–∞–≤–∏–ª –∏–º–ø–æ—Ä—Ç fs –¥–ª—è saveToFile

// === –ü–ï–†–ï–ú–ï–©–ï–ù–ù–´–ï –ò–ú–ü–û–†–¢–´ ===
import { Brain } from './creatures/fly/fly_brain';
import { EyeFactory } from './creatures/fly/fly_eyes';
import { LegFactory } from './creatures/fly/fly_legs';
// ============================

export class SquidInteractive {
    private fly: Fly;
    private rl: readline.Interface;
    private currentOctopus: Octopus;
    private navigationStack: Octopus[] = [];
    private isRunning: boolean = false;

    constructor() {
        this.fly = new Fly();

        // –û–î–ò–ù readline –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ–≥–æ
        this.rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout,
        });

        this.currentOctopus = this.createFlyOctopus();
        this.navigationStack = [this.currentOctopus];
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Å—å–º–∏–Ω–æ–≥–∞ —Å –º—É—Ö–æ–π
     */
    private createFlyOctopus(): Octopus {
        const mainOctopus = new Octopus({
            logo: `
ü¶ë ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ü¶ë
    –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –ö–ê–õ–¨–ú–ê–† –° –ú–£–•–û–ô
ü¶ë ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ü¶ë`,
            greeting: "ü¶ë –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º - –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:"
        });

        // –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –º—É—Ö–∏
        mainOctopus.addTentacle(this.createTableTentacle());
        mainOctopus.addTentacle(this.createUntableTentacle());
        mainOctopus.addTentacle(this.createTransformTentacle());
        mainOctopus.addTentacle(this.createUtilitiesTentacle());

        return mainOctopus;
    }

    /**
     * ASCII ‚Üí –§–∞–π–ª–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
     */
    private createTableTentacle(): Octopus {
        return new Octopus({
            greeting: "üìÅ ASCII ‚Üí –§–∞–π–ª–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (table)",
            action: async () => {
                console.log("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–∑ ASCII –¥–µ—Ä–µ–≤–∞\n");

                try {
                    // –ü–æ–ª—É—á–∞–µ–º ASCII –¥–µ—Ä–µ–≤–æ
                    const asciiInput = await this.askMultilineInput("–í–≤–µ–¥–∏—Ç–µ ASCII –¥–µ—Ä–µ–≤–æ (–∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π):");
                    if (!asciiInput.trim()) {
                        console.log("‚ùå ASCII –¥–µ—Ä–µ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
                        return;
                    }

                    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
                    const outputPath = await this.askInput("–ü—É—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã [./output]:");
                    const finalOutputPath = outputPath.trim() || './output';

                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
                    console.log("\nüîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:");
                    const createReadme = await this.askYesNo("–°–æ–∑–¥–∞—Ç—å README.md?", true);
                    const createGitignore = await this.askYesNo("–°–æ–∑–¥–∞—Ç—å .gitignore?", true);
                    const createStubs = await this.askYesNo("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã –∑–∞–≥–ª—É—à–∫–∞–º–∏?", false);
                    const overwrite = await this.askYesNo("–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã?", false);

                    console.log("\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞...");

                    // –í—ã–∑—ã–≤–∞–µ–º –º—É—Ö—É
                    const result = this.fly.table(asciiInput, finalOutputPath, {
                        createReadme,
                        createGitignore,
                        createStubs,
                        overwrite
                    });

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    this.showResult(result, "–§–∞–π–ª–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞");

                } catch (error) {
                    console.log(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`);
                }
            }
        });
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø—É—Ç–∏ –∏ –æ–ø—Ü–∏–π —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –§–°
     */
    private async askUntableOptions(): Promise<{ finalPath: string, options: { maxDepth?: number, showFiles: boolean, excludeDirs: string[] } }> {
        const inputPath = await this.askInput("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–ª–∏ —Ñ–∞–π–ª—É –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è [./]:");
        const finalPath = inputPath.trim() || './';

        console.log("\nüîß –û–ø—Ü–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:");
        const maxDepthInput = await this.askInput("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π) [0]:");
        const maxDepth = parseInt(maxDepthInput.trim());

        const showFiles = await this.askYesNo("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è?", true);

        const excludeInput = await this.askInput("–ò—Å–∫–ª—é—á–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏/—Ñ–∞–π–ª—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: node_modules,.git) [node_modules,.git]:");
        const excludeDirs = excludeInput.trim()
            ? excludeInput.split(',').map(d => d.trim())
            : ['node_modules', '.git'];

        return {
            finalPath,
            options: {
                maxDepth: isNaN(maxDepth) || maxDepth <= 0 ? undefined : maxDepth, // –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ –∏–ª–∏ 0, —Ç–æ undefined
                showFiles,
                excludeDirs
            }
        };
    }

    /**
     * –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ ‚Üí —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
     */

    private createUntableTentacle(): Octopus {
        const untableMenu = new Octopus({
            greeting: "üå≥ –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ ‚Üí —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"
        });

        // FS ‚Üí ASCII
        untableMenu.addTentacle(new Octopus({
            greeting: "–§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ ‚Üí ASCII –¥–µ—Ä–µ–≤–æ",
            action: async () => {
                console.log("üå≥ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ ASCII\n");
                try {
                    const { finalPath, options } = await this.askUntableOptions();
                    console.log("\nüîÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...");
                    const result = this.fly.untable(finalPath, options);

                    if (result.success && typeof result.data === 'string') {
                        console.log("‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n");
                        console.log("üìä ASCII-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:");
                        console.log(result.data);
                        const save = await this.askYesNo("\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª?", false);
                        if (save) {
                            const fileName = await this.askInput("–ò–º—è —Ñ–∞–π–ª–∞ [tree.txt]:");
                            await this.saveToFile(result.data, fileName.trim() || 'tree.txt');
                        }
                    } else {
                        console.log(`‚ùå –û—à–∏–±–∫–∞: ${result.error || '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'}`);
                    }
                } catch (error) {
                    const message = error instanceof Error ? error.message : String(error);
                    console.log(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${message}`);
                }
            }
        }));

        // FS ‚Üí JSON
        untableMenu.addTentacle(new Octopus({
            greeting: "–§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ ‚Üí JSON",
            action: async () => {
                console.log("üìÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ JSON\n");
                try {
                    const { finalPath, options } = await this.askUntableOptions();
                    console.log("\nüîÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ JSON...");

                    // –®–∞–≥ 1: FS -> –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ –¥–µ—Ä–µ–≤–æ (—á–µ—Ä–µ–∑ Brain)
                    // –ú—ã –Ω–µ –º–æ–∂–µ–º –Ω–∞–ø—Ä—è–º—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fly.untable, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ASCII.
                    // –ù–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã.
                    const eye = EyeFactory.create('filesystem');
                    const cleanPath = eye.clean(finalPath); // Eye –¥–ª—è filesystem –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ—Ç –ø—É—Ç—å
                    const brain = new Brain(); // –ù—É–∂–µ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä Brain
                    const abstractTree = brain.parseToAbstract(cleanPath, 'filesystem');

                    // –®–∞–≥ 2: –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ –¥–µ—Ä–µ–≤–æ -> JSON (—á–µ—Ä–µ–∑ JsonLeg)
                    const jsonLeg = LegFactory.create('json');
                    const jsonResult = jsonLeg.generate(abstractTree, options); // –ü–µ—Ä–µ–¥–∞–µ–º –æ–ø—Ü–∏–∏, –µ—Å–ª–∏ JsonLeg –∏—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç

                    // JsonLeg.generate –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç TransformResult, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ
                    if (jsonResult.success) {
                        console.log("‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n");
                        console.log("üìÑ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤ JSON:");
                        console.log(JSON.stringify(jsonResult.data, null, 2));
                        const save = await this.askYesNo("\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª?", false);
                        if (save) {
                            await this.saveToFile(JSON.stringify(jsonResult.data, null, 2), "structure.json");
                        }
                    } else {
                        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ JSON: ${jsonResult.error}`);
                    }
                } catch (error) {
                    const message = error instanceof Error ? error.message : String(error);
                    console.log(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${message}`);
                }
            }
        }));

        // FS ‚Üí Markdown
        untableMenu.addTentacle(new Octopus({
            greeting: "–§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ ‚Üí Markdown",
            action: async () => {
                console.log("üìÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ Markdown\n");
                try {
                    const { finalPath, options } = await this.askUntableOptions();
                    console.log("\nüîÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ Markdown...");

                    const eye = EyeFactory.create('filesystem');
                    const cleanPath = eye.clean(finalPath);
                    const brain = new Brain();
                    const abstractTree = brain.parseToAbstract(cleanPath, 'filesystem');

                    const mdLeg = LegFactory.create('markdown');
                    const mdResult = mdLeg.generate(abstractTree, { ...options, includeFileContent: false }); // –ü—Ä–∏–º–µ—Ä –æ–ø—Ü–∏–∏ –¥–ª—è MarkdownLeg

                    if (mdResult.success && typeof mdResult.data === 'string') {
                        console.log("‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n");
                        console.log("üìÑ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤ Markdown:");
                        console.log("```markdown");
                        console.log(mdResult.data);
                        console.log("```");
                        const save = await this.askYesNo("\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª?", false);
                        if (save) {
                            await this.saveToFile(mdResult.data, "structure.md");
                        }
                    } else {
                        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ Markdown: ${mdResult.error || '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'}`);
                    }
                } catch (error) {
                    const message = error instanceof Error ? error.message : String(error);
                    console.log(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${message}`);
                }
            }
        }));

        // FS ‚Üí SVG –¥–∏–∞–≥—Ä–∞–º–º–∞
        untableMenu.addTentacle(new Octopus({
            greeting: "–§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ ‚Üí SVG –¥–∏–∞–≥—Ä–∞–º–º–∞",
            action: async () => {
                console.log("üé® –°–æ–∑–¥–∞–Ω–∏–µ SVG –¥–∏–∞–≥—Ä–∞–º–º—ã —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã\n");
                try {
                    const { finalPath, options } = await this.askUntableOptions();
                    console.log("\nüîÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã...");

                    const eye = EyeFactory.create('filesystem');
                    const cleanPath = eye.clean(finalPath);
                    const brain = new Brain();
                    const abstractTree = brain.parseToAbstract(cleanPath, 'filesystem');

                    const svgLeg = LegFactory.create('svg');
                    const svgResult = svgLeg.generate(abstractTree, options); // –ü–µ—Ä–µ–¥–∞–µ–º –æ–ø—Ü–∏–∏, –µ—Å–ª–∏ SvgLeg –∏—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç

                    if (svgResult.success && typeof svgResult.data === 'string') {
                        console.log("‚úÖ SVG –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–Ω–∞!");
                        const fileName = await this.askInput("–ò–º—è —Ñ–∞–π–ª–∞ [structure.svg]:");
                        await this.saveToFile(svgResult.data, fileName.trim() || 'structure.svg');
                        console.log("üí° –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!");
                    } else {
                        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SVG: ${svgResult.error || '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö'}`);
                    }
                } catch (error) {
                    const message = error instanceof Error ? error.message : String(error);
                    console.log(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${message}`);
                }
            }
        }));

        return untableMenu;
    }

    /**
     * –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
     */
    private createTransformTentacle(): Octopus {
        const transformMenu = new Octopus({
            greeting: "üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤"
        });

        // ASCII ‚Üí Markdown
        transformMenu.addTentacle(new Octopus({
            greeting: "ASCII ‚Üí Markdown",
            action: async () => {
                console.log("üìÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ASCII –≤ Markdown\n");

                try {
                    const input = await this.askMultilineInput("–í–≤–µ–¥–∏—Ç–µ ASCII –¥–µ—Ä–µ–≤–æ:");
                    if (!input.trim()) return;

                    const maxHeaderLevel = await this.askNumber("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ [6]:", 6);
                    const includeFileContent = await this.askYesNo("–í–∫–ª—é—á–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤?", false);

                    console.log("\nüîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ...");

                    const result = this.fly.asciiToMarkdown(input, { maxHeaderLevel, includeFileContent });

                    if (result.success) {
                        console.log("‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n");
                        console.log("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ Markdown:");
                        console.log("```");
                        console.log(result.data);
                        console.log("```");

                        const save = await this.askYesNo("\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª?", false);
                        if (save) {
                            await this.saveToFile(result.data, "tree.md");
                        }
                    } else {
                        console.log(`‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
                    }
                } catch (error) {
                    console.log(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`);
                }
            }
        }));

        // ASCII ‚Üí JSON
        transformMenu.addTentacle(new Octopus({
            greeting: "ASCII ‚Üí JSON",
            action: async () => {
                console.log("üìÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ASCII –≤ JSON\n");

                try {
                    const input = await this.askMultilineInput("–í–≤–µ–¥–∏—Ç–µ ASCII –¥–µ—Ä–µ–≤–æ:");
                    if (!input.trim()) return;

                    console.log("\nüîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ...");

                    const result = this.fly.asciiToJson(input);

                    if (result.success) {
                        console.log("‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n");
                        console.log("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON:");
                        console.log(JSON.stringify(result.data, null, 2));

                        const save = await this.askYesNo("\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª?", false);
                        if (save) {
                            await this.saveToFile(JSON.stringify(result.data, null, 2), "tree.json");
                        }
                    } else {
                        console.log(`‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
                    }
                } catch (error) {
                    console.log(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`);
                }
            }
        }));

        // ASCII ‚Üí SVG
        transformMenu.addTentacle(new Octopus({
            greeting: "ASCII ‚Üí SVG –¥–∏–∞–≥—Ä–∞–º–º–∞",
            action: async () => {
                console.log("üé® –°–æ–∑–¥–∞–Ω–∏–µ SVG –¥–∏–∞–≥—Ä–∞–º–º—ã –∏–∑ ASCII\n");

                try {
                    const input = await this.askMultilineInput("–í–≤–µ–¥–∏—Ç–µ ASCII –¥–µ—Ä–µ–≤–æ:");
                    if (!input.trim()) return;

                    console.log("\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã...");

                    const result = this.fly.asciiToSvg(input);

                    if (result.success) {
                        console.log("‚úÖ SVG –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–Ω–∞!");

                        const fileName = await this.askInput("–ò–º—è —Ñ–∞–π–ª–∞ [tree.svg]:");
                        const finalFileName = fileName.trim() || 'tree.svg';

                        await this.saveToFile(result.data, finalFileName);
                        console.log("üí° –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!");
                    } else {
                        console.log(`‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
                    }
                } catch (error) {
                    console.log(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`);
                }
            }
        }));

        return transformMenu;
    }

    /**
     * –£—Ç–∏–ª–∏—Ç—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
     */
    private createUtilitiesTentacle(): Octopus {
        const utilitiesMenu = new Octopus({
            greeting: "üõ†Ô∏è –£—Ç–∏–ª–∏—Ç—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        });

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ—Ä–µ–≤–∞
        utilitiesMenu.addTentacle(new Octopus({
            greeting: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ—Ä–µ–≤–∞",
            action: async () => {
                console.log("üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ—Ä–µ–≤–∞\n");

                try {
                    const formats = this.fly.getAvailableFormats().input;
                    console.log("üì• –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:", formats.join(', '));

                    const formatInput = await this.askInput("–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö [ascii]:");
                    const format = (formatInput.trim() || 'ascii') as TreeFormat;

                    const input = await this.askMultilineInput("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:");
                    if (!input.trim()) return;

                    console.log("\nüîÑ –ê–Ω–∞–ª–∏–∑...");

                    const stats = this.fly.getTreeStats(input, format);

                    if (stats) {
                        console.log("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ—Ä–µ–≤–∞:");
                        console.log(`üìÅ –í—Å–µ–≥–æ —É–∑–ª–æ–≤: ${stats.totalNodes}`);
                        console.log(`üìÑ –§–∞–π–ª–æ–≤: ${stats.filesCount}`);
                        console.log(`üìÇ –ü–∞–ø–æ–∫: ${stats.directoriesCount}`);
                        console.log(`üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞: ${stats.maxDepth}`);
                        console.log(`üìê –°—Ä–µ–¥–Ω—è—è –≥–ª—É–±–∏–Ω–∞: ${stats.averageDepth.toFixed(2)}`);

                        const ratio = stats.filesCount / stats.directoriesCount;
                        console.log(`‚öñÔ∏è –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ñ–∞–π–ª—ã/–ø–∞–ø–∫–∏: ${ratio.toFixed(1)}`);

                        if (stats.maxDepth > 5) {
                            console.log("‚ö†Ô∏è –ì–ª—É–±–æ–∫–∞—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å - –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É");
                        } else {
                            console.log("‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã");
                        }
                    } else {
                        console.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ");
                    }
                } catch (error) {
                    console.log(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`);
                }
            }
        }));

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º—É—Ö–µ
        utilitiesMenu.addTentacle(new Octopus({
            greeting: "‚ÑπÔ∏è –û –º—É—Ö–µ-—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä–µ",
            action: async () => {
                console.log("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º—É—Ö–µ-—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä–µ\n");

                const formats = this.fly.getAvailableFormats();

                console.log("ü™∞ –ú—É—Ö–∞-—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä v1.0");
                console.log("üåü –°–æ–∑–¥–∞–Ω–∞ –≤ —Ä–∞–º–∫–∞—Ö RCD Garden –ø—Ä–æ–µ–∫—Ç–∞");
                console.log("");
                console.log("üì• –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤—Ö–æ–¥–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:");
                formats.input.forEach(format => console.log(`  ‚Ä¢ ${format}`));
                console.log("");
                console.log("üì§ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:");
                formats.output.forEach(format => console.log(`  ‚Ä¢ ${format}`));
                console.log("");
                console.log("üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:");
                console.log("  üëÅÔ∏è Eyes - –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –¥–∞–Ω–Ω—ã—Ö");
                console.log("  üß† Brain - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä");
                console.log("  ü¶µ Legs - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤");
                console.log("  ü™∞ Fly - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π");
                console.log("");
                console.log("üí´ –§–∏–ª–æ—Å–æ—Ñ–∏—è: –û–¥–∏–Ω –º–æ–∑–≥ - –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤");
                console.log("üåä –ß–∞—Å—Ç—å —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã RCD Garden");
            }
        }));

        return utilitiesMenu;
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –º–µ—Ç–æ–¥—ã –≤–≤–æ–¥–∞ - –∏—Å–ø–æ–ª—å–∑—É—é—Ç –û–î–ò–ù rl –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
     */
    private askInput(question: string): Promise<string> {
        return new Promise((resolve) => {
            this.rl.question(question + ' ', (answer: string) => {
                resolve(answer);
            });
        });
    }

    private askMultilineInput(question: string): Promise<string> {
        return new Promise((resolve) => {
            console.log(question);
            console.log("(–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π)");

            const lines: string[] = [];

            const handleLine = (line: string) => {
                if (line.trim() === '') {
                    this.rl.removeListener('line', handleLine);
                    resolve(lines.join('\n'));
                } else {
                    lines.push(line);
                }
            };

            this.rl.on('line', handleLine);
        });
    }

    private askYesNo(question: string, defaultValue: boolean = false): Promise<boolean> {
        return new Promise((resolve) => {
            const defaultText = defaultValue ? '[Y/n]' : '[y/N]';
            this.rl.question(`${question} ${defaultText} `, (answer: string) => {
                const trimmed = answer.trim().toLowerCase();
                if (trimmed === '') {
                    resolve(defaultValue);
                } else {
                    resolve(trimmed === 'y' || trimmed === 'yes');
                }
            });
        });
    }

    private askNumber(question: string, defaultValue: number): Promise<number> {
        return new Promise((resolve) => {
            this.rl.question(`${question} `, (answer: string) => {
                const parsed = parseInt(answer.trim());
                resolve(isNaN(parsed) ? defaultValue : parsed);
            });
        });
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
     */
    private async saveToFile(content: string, fileName: string): Promise<void> {
        try {
            const fs = require('fs');
            fs.writeFileSync(fileName, content);
            console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: ${fileName}`);
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    private showResult(result: any, operationName: string): void {
        if (result.success) {
            console.log(`‚úÖ ${operationName} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!`);
            if (result.metadata?.outputPath) {
                console.log(`üìÇ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${result.metadata.outputPath}`);
            }
            if (result.metadata?.totalCreated) {
                console.log(`üìä –°–æ–∑–¥–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${result.metadata.totalCreated}`);
            }

            if (result.data && Array.isArray(result.data)) {
                console.log("\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:");
                result.data.slice(0, 10).forEach(path => console.log(`  ‚Ä¢ ${path}`));
                if (result.data.length > 10) {
                    console.log(`  ... –∏ –µ—â–µ ${result.data.length - 10} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
                }
            }
        } else {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ${operationName.toLowerCase()}:`);
            console.log(`   ${result.error}`);
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ CLI (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
     */
    async start(): Promise<void> {
        this.isRunning = true;
        console.clear();

        console.log("ü¶ë === –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –ö–ê–õ–¨–ú–ê–† –ó–ê–ü–£–©–ï–ù === ü¶ë\n");

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        this.currentOctopus.showLogo();
        this.currentOctopus.showGreeting();
        console.log("");
        this.currentOctopus.showTentacleMenu();

        await this.handleMainMenu();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
     */
    private async handleMainMenu(): Promise<void> {
        try {
            console.log("\nüß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è: 'q' - –≤—ã—Ö–æ–¥, 'h' - –ø–æ–º–æ—â—å");
            const choice = await this.askInput("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:");

            if (choice.toLowerCase() === 'q') {
                await this.quit();
                return;
            }

            if (choice.toLowerCase() === 'h') {
                this.showHelp();
                await this.handleMainMenu();
                return;
            }

            const tentacleIndex = parseInt(choice) - 1;
            const selectedTentacle = this.currentOctopus.getTentacle(tentacleIndex);

            if (selectedTentacle) {
                await this.executeTentacle(selectedTentacle);
                await this.handleMainMenu();
            } else {
                console.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä");
                await this.handleMainMenu();
            }
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            await this.handleMainMenu();
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å —â—É–ø–∞–ª—å—Ü–µ
     */
    private async executeTentacle(tentacle: Octopus): Promise<void> {
        console.clear();

        if (tentacle.isExecutor()) {
            await tentacle.execute();
            console.log("\n" + "=".repeat(50));
            await this.askInput("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
        } else if (tentacle.isCoordinator()) {
            // –ü–æ–¥–º–µ–Ω—é
            tentacle.showGreeting();
            console.log("");
            tentacle.showTentacleMenu();

            const choice = await this.askInput("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –ø–æ–¥–º–µ–Ω—é (–∏–ª–∏ 'b' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞):");

            if (choice.toLowerCase() !== 'b') {
                const subIndex = parseInt(choice) - 1;
                const subTentacle = tentacle.getTentacle(subIndex);

                if (subTentacle) {
                    await this.executeTentacle(subTentacle);
                } else {
                    console.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä");
                    await this.askInput("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
                }
            }
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
     */
    private showHelp(): void {
        console.log("\nüÜò === –°–ü–†–ê–í–ö–ê === üÜò");
        console.log("ü¶ë –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ª—å–º–∞—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º—É—Ö–æ–π-—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä–æ–º");
        console.log("");
        console.log("üìã –ö–æ–º–∞–Ω–¥—ã:");
        console.log("  1-9 - –≤—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é");
        console.log("  'q' - –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã");
        console.log("  'h' - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É");
        console.log("  'b' - –≤–æ–∑–≤—Ä–∞—Ç –≤ –ø–æ–¥–º–µ–Ω—é");
        console.log("");
        console.log("ü™∞ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º—É—Ö–∏:");
        console.log("  ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –∏–∑ ASCII");
        console.log("  ‚Ä¢ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã");
        console.log("  ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");
        console.log("  ‚Ä¢ SVG –¥–∏–∞–≥—Ä–∞–º–º—ã");
    }

    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
     */
    private async quit(): Promise<void> {
        console.log("\nü¶ë –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–∞–ª—å–º–∞—Ä–∞!");
        console.log("ü™∞ –í—Å–µ –º—É—Ö–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ –∞–∫–≤–∞—Ä–∏—É–º...");
        console.log("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");

        this.rl.close();
        process.exit(0);
    }
}

// –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
if (require.main === module) {
    async function runInteractive() {
        const squid = new SquidInteractive();
        await squid.start();
    }

    runInteractive().catch(console.error);
}